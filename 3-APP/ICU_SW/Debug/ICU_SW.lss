
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00003a3c  00003ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800074  00800074  00003ae4  2**0
                  ALLOC
  3 .stab         00002d48  00000000  00000000  00003ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000187a  00000000  00000000  0000682c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000080a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000081e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c025  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_1>
       8:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_2>
       c:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_3>
      10:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_4>
      14:	0c 94 26 14 	jmp	0x284c	; 0x284c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_7>
      20:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__vector_8>
      24:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__vector_9>
      28:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__vector_10>
      2c:	0c 94 27 13 	jmp	0x264e	; 0x264e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <main>
      8a:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPortDirection>:
#include "DIO_interface.h"



u8  DIO_u8SetPortDirection (DIO_PortType port ,u8 Copy_u8Direciton )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_u8SetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_u8SetPortDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
    StdReturnType ReturnValue = E_OK;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	89 83       	std	Y+1, r24	; 0x01

    switch (port)
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3d 83       	std	Y+5, r19	; 0x05
     b64:	2c 83       	std	Y+4, r18	; 0x04
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	91 05       	cpc	r25, r1
     b6e:	d1 f0       	breq	.+52     	; 0xba4 <DIO_u8SetPortDirection+0x5e>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <DIO_u8SetPortDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	61 f0       	breq	.+24     	; 0xb9a <DIO_u8SetPortDirection+0x54>
     b82:	1f c0       	rjmp	.+62     	; 0xbc2 <DIO_u8SetPortDirection+0x7c>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	81 f0       	breq	.+32     	; 0xbae <DIO_u8SetPortDirection+0x68>
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
     b90:	9d 81       	ldd	r25, Y+5	; 0x05
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	81 f0       	breq	.+32     	; 0xbb8 <DIO_u8SetPortDirection+0x72>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <DIO_u8SetPortDirection+0x7c>
    {
    case DIO_PORTA: DDRA = Copy_u8Direciton ; break;
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	80 83       	st	Z, r24
     ba2:	10 c0       	rjmp	.+32     	; 0xbc4 <DIO_u8SetPortDirection+0x7e>
    case DIO_PORTB: DDRB = Copy_u8Direciton ; break;  
     ba4:	e7 e3       	ldi	r30, 0x37	; 55
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	80 83       	st	Z, r24
     bac:	0b c0       	rjmp	.+22     	; 0xbc4 <DIO_u8SetPortDirection+0x7e>
    case DIO_PORTC: DDRC = Copy_u8Direciton ; break;
     bae:	e4 e3       	ldi	r30, 0x34	; 52
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	80 83       	st	Z, r24
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <DIO_u8SetPortDirection+0x7e>
    case DIO_PORTD: DDRD = Copy_u8Direciton ; break;
     bb8:	e1 e3       	ldi	r30, 0x31	; 49
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	80 83       	st	Z, r24
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <DIO_u8SetPortDirection+0x7e>
        
    default:ReturnValue=E_NOT_OK; break;
     bc2:	19 82       	std	Y+1, r1	; 0x01
    }

    return ReturnValue;
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue (DIO_PortType port ,u8 Copy_u8Value )
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <DIO_u8SetPortValue+0x6>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <DIO_u8SetPortValue+0x8>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	8a 83       	std	Y+2, r24	; 0x02
     be6:	6b 83       	std	Y+3, r22	; 0x03
    StdReturnType ReturnValue = E_OK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	89 83       	std	Y+1, r24	; 0x01

    switch (port)
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	3d 83       	std	Y+5, r19	; 0x05
     bf4:	2c 83       	std	Y+4, r18	; 0x04
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	d1 f0       	breq	.+52     	; 0xc34 <DIO_u8SetPortValue+0x5e>
     c00:	2c 81       	ldd	r18, Y+4	; 0x04
     c02:	3d 81       	ldd	r19, Y+5	; 0x05
     c04:	22 30       	cpi	r18, 0x02	; 2
     c06:	31 05       	cpc	r19, r1
     c08:	2c f4       	brge	.+10     	; 0xc14 <DIO_u8SetPortValue+0x3e>
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
     c0c:	9d 81       	ldd	r25, Y+5	; 0x05
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	61 f0       	breq	.+24     	; 0xc2a <DIO_u8SetPortValue+0x54>
     c12:	1f c0       	rjmp	.+62     	; 0xc52 <DIO_u8SetPortValue+0x7c>
     c14:	2c 81       	ldd	r18, Y+4	; 0x04
     c16:	3d 81       	ldd	r19, Y+5	; 0x05
     c18:	22 30       	cpi	r18, 0x02	; 2
     c1a:	31 05       	cpc	r19, r1
     c1c:	81 f0       	breq	.+32     	; 0xc3e <DIO_u8SetPortValue+0x68>
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	9d 81       	ldd	r25, Y+5	; 0x05
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	91 05       	cpc	r25, r1
     c26:	81 f0       	breq	.+32     	; 0xc48 <DIO_u8SetPortValue+0x72>
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_PORTA: PORTA = Copy_u8Value ; break;
     c2a:	eb e3       	ldi	r30, 0x3B	; 59
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	80 83       	st	Z, r24
     c32:	10 c0       	rjmp	.+32     	; 0xc54 <DIO_u8SetPortValue+0x7e>
    case DIO_PORTB: PORTB = Copy_u8Value ; break;  
     c34:	e8 e3       	ldi	r30, 0x38	; 56
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	80 83       	st	Z, r24
     c3c:	0b c0       	rjmp	.+22     	; 0xc54 <DIO_u8SetPortValue+0x7e>
    case DIO_PORTC: PORTC = Copy_u8Value ; break;
     c3e:	e5 e3       	ldi	r30, 0x35	; 53
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	80 83       	st	Z, r24
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <DIO_u8SetPortValue+0x7e>
    case DIO_PORTD: PORTD = Copy_u8Value ; break;
     c48:	e2 e3       	ldi	r30, 0x32	; 50
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	80 83       	st	Z, r24
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <DIO_u8SetPortValue+0x7e>
        
    default:ReturnValue=E_NOT_OK; break;
     c52:	19 82       	std	Y+1, r1	; 0x01
    }

    return ReturnValue;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <DIO_u8SetPinDirection>:


/**************************************************************************************/
u8 DIO_u8SetPinDirection (DIO_PortType port ,DIO_PinType pin , DIO_PinMode mode)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	2e 97       	sbiw	r28, 0x0e	; 14
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	8a 83       	std	Y+2, r24	; 0x02
     c7c:	6b 83       	std	Y+3, r22	; 0x03
     c7e:	4c 83       	std	Y+4, r20	; 0x04
    StdReturnType ReturnValue=E_OK;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	89 83       	std	Y+1, r24	; 0x01
    if (pin>=DIO_PIN0 && pin<=DIO_PIN7)
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	08 f0       	brcs	.+2      	; 0xc8c <DIO_u8SetPinDirection+0x26>
     c8a:	0a c2       	rjmp	.+1044   	; 0x10a0 <DIO_u8SetPinDirection+0x43a>
    {
        switch (port)
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3e 87       	std	Y+14, r19	; 0x0e
     c94:	2d 87       	std	Y+13, r18	; 0x0d
     c96:	8d 85       	ldd	r24, Y+13	; 0x0d
     c98:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	91 05       	cpc	r25, r1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <DIO_u8SetPinDirection+0x3c>
     ca0:	91 c0       	rjmp	.+290    	; 0xdc4 <DIO_u8SetPinDirection+0x15e>
     ca2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ca4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	2c f4       	brge	.+10     	; 0xcb6 <DIO_u8SetPinDirection+0x50>
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <DIO_u8SetPinDirection+0x6a>
     cb4:	f6 c1       	rjmp	.+1004   	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
     cb6:	2d 85       	ldd	r18, Y+13	; 0x0d
     cb8:	3e 85       	ldd	r19, Y+14	; 0x0e
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <DIO_u8SetPinDirection+0x5c>
     cc0:	fb c0       	rjmp	.+502    	; 0xeb8 <DIO_u8SetPinDirection+0x252>
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_u8SetPinDirection+0x68>
     ccc:	6f c1       	rjmp	.+734    	; 0xfac <DIO_u8SetPinDirection+0x346>
     cce:	e9 c1       	rjmp	.+978    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
        {
            case DIO_PORTA: 
                switch (mode)
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3c 87       	std	Y+12, r19	; 0x0c
     cd8:	2b 87       	std	Y+11, r18	; 0x0b
     cda:	8b 85       	ldd	r24, Y+11	; 0x0b
     cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	f9 f0       	breq	.+62     	; 0xd22 <DIO_u8SetPinDirection+0xbc>
     ce4:	2b 85       	ldd	r18, Y+11	; 0x0b
     ce6:	3c 85       	ldd	r19, Y+12	; 0x0c
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <DIO_u8SetPinDirection+0x8a>
     cee:	40 c0       	rjmp	.+128    	; 0xd70 <DIO_u8SetPinDirection+0x10a>
     cf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	09 f0       	breq	.+2      	; 0xcfa <DIO_u8SetPinDirection+0x94>
     cf8:	63 c0       	rjmp	.+198    	; 0xdc0 <DIO_u8SetPinDirection+0x15a>
                {
                    case DIO_OUTPUT_MODE:         SET_BIT(DDRA , pin);                     break;
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_u8SetPinDirection+0xb2>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_u8SetPinDirection+0xae>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	c0 c1       	rjmp	.+896    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_PULL_UP_MODE:  CLR_BIT(DDRA , pin); SET_BIT(PORTA,pin); break;
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_u8SetPinDirection+0xd8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	2a 95       	dec	r18
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_u8SetPinDirection+0xd4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	ab e3       	ldi	r26, 0x3B	; 59
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	eb e3       	ldi	r30, 0x3B	; 59
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_u8SetPinDirection+0x100>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_u8SetPinDirection+0xfc>
     d6a:	84 2b       	or	r24, r20
     d6c:	8c 93       	st	X, r24
     d6e:	99 c1       	rjmp	.+818    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_FLOATING_MODE: CLR_BIT(DDRA , pin); CLR_BIT(PORTA,pin); break;
     d70:	aa e3       	ldi	r26, 0x3A	; 58
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ea e3       	ldi	r30, 0x3A	; 58
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_u8SetPinDirection+0x126>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	2a 95       	dec	r18
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_u8SetPinDirection+0x122>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_u8SetPinDirection+0x14e>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_u8SetPinDirection+0x14a>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	71 c1       	rjmp	.+738    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    default :ReturnValue=E_NOT_OK; break;
     dc0:	19 82       	std	Y+1, r1	; 0x01
     dc2:	6f c1       	rjmp	.+734    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                }
                break;
            case DIO_PORTB: 
                switch (mode)
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3a 87       	std	Y+10, r19	; 0x0a
     dcc:	29 87       	std	Y+9, r18	; 0x09
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	f9 f0       	breq	.+62     	; 0xe16 <DIO_u8SetPinDirection+0x1b0>
     dd8:	29 85       	ldd	r18, Y+9	; 0x09
     dda:	3a 85       	ldd	r19, Y+10	; 0x0a
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_u8SetPinDirection+0x17e>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_u8SetPinDirection+0x1fe>
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	09 f0       	breq	.+2      	; 0xdee <DIO_u8SetPinDirection+0x188>
     dec:	63 c0       	rjmp	.+198    	; 0xeb4 <DIO_u8SetPinDirection+0x24e>
                {
                    case DIO_OUTPUT_MODE:         SET_BIT(DDRB , pin);                     break;
     dee:	a7 e3       	ldi	r26, 0x37	; 55
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e3       	ldi	r30, 0x37	; 55
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_u8SetPinDirection+0x1a6>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_u8SetPinDirection+0x1a2>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	46 c1       	rjmp	.+652    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_PULL_UP_MODE:  CLR_BIT(DDRB , pin); SET_BIT(PORTB,pin); break;
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_u8SetPinDirection+0x1cc>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	2a 95       	dec	r18
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_u8SetPinDirection+0x1c8>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	a8 e3       	ldi	r26, 0x38	; 56
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e8 e3       	ldi	r30, 0x38	; 56
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_u8SetPinDirection+0x1f4>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_u8SetPinDirection+0x1f0>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	1f c1       	rjmp	.+574    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_FLOATING_MODE: CLR_BIT(DDRB , pin); CLR_BIT(PORTB,pin); break;
     e64:	a7 e3       	ldi	r26, 0x37	; 55
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e3       	ldi	r30, 0x37	; 55
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8SetPinDirection+0x21a>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	2a 95       	dec	r18
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_u8SetPinDirection+0x216>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	a8 e3       	ldi	r26, 0x38	; 56
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e8 e3       	ldi	r30, 0x38	; 56
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_u8SetPinDirection+0x242>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_u8SetPinDirection+0x23e>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	f7 c0       	rjmp	.+494    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    default :ReturnValue=E_NOT_OK; break;
     eb4:	19 82       	std	Y+1, r1	; 0x01
     eb6:	f5 c0       	rjmp	.+490    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                }
                break;
            case DIO_PORTC: 
                switch (mode)
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	38 87       	std	Y+8, r19	; 0x08
     ec0:	2f 83       	std	Y+7, r18	; 0x07
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	98 85       	ldd	r25, Y+8	; 0x08
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	f9 f0       	breq	.+62     	; 0xf0a <DIO_u8SetPinDirection+0x2a4>
     ecc:	2f 81       	ldd	r18, Y+7	; 0x07
     ece:	38 85       	ldd	r19, Y+8	; 0x08
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_u8SetPinDirection+0x272>
     ed6:	40 c0       	rjmp	.+128    	; 0xf58 <DIO_u8SetPinDirection+0x2f2>
     ed8:	8f 81       	ldd	r24, Y+7	; 0x07
     eda:	98 85       	ldd	r25, Y+8	; 0x08
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	09 f0       	breq	.+2      	; 0xee2 <DIO_u8SetPinDirection+0x27c>
     ee0:	63 c0       	rjmp	.+198    	; 0xfa8 <DIO_u8SetPinDirection+0x342>
                {
                    case DIO_OUTPUT_MODE:         SET_BIT(DDRC , pin);                     break;
     ee2:	a4 e3       	ldi	r26, 0x34	; 52
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_u8SetPinDirection+0x29a>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_u8SetPinDirection+0x296>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	cc c0       	rjmp	.+408    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_PULL_UP_MODE:  CLR_BIT(DDRC , pin); SET_BIT(PORTC,pin); break;
     f0a:	a4 e3       	ldi	r26, 0x34	; 52
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e4 e3       	ldi	r30, 0x34	; 52
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_u8SetPinDirection+0x2c0>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_u8SetPinDirection+0x2bc>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	a5 e3       	ldi	r26, 0x35	; 53
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e5 e3       	ldi	r30, 0x35	; 53
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_u8SetPinDirection+0x2e8>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_u8SetPinDirection+0x2e4>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	a5 c0       	rjmp	.+330    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_FLOATING_MODE: CLR_BIT(DDRC , pin); CLR_BIT(PORTC,pin); break;
     f58:	a4 e3       	ldi	r26, 0x34	; 52
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e4 e3       	ldi	r30, 0x34	; 52
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_u8SetPinDirection+0x30e>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_u8SetPinDirection+0x30a>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	a5 e3       	ldi	r26, 0x35	; 53
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e3       	ldi	r30, 0x35	; 53
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8SetPinDirection+0x336>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8SetPinDirection+0x332>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	7d c0       	rjmp	.+250    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    default :ReturnValue=E_NOT_OK; break;
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	7b c0       	rjmp	.+246    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                }
                break;
            case DIO_PORTD: 
                switch (mode)
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3e 83       	std	Y+6, r19	; 0x06
     fb4:	2d 83       	std	Y+5, r18	; 0x05
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	f9 f0       	breq	.+62     	; 0xffe <DIO_u8SetPinDirection+0x398>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <DIO_u8SetPinDirection+0x366>
     fca:	40 c0       	rjmp	.+128    	; 0x104c <DIO_u8SetPinDirection+0x3e6>
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <DIO_u8SetPinDirection+0x370>
     fd4:	63 c0       	rjmp	.+198    	; 0x109c <DIO_u8SetPinDirection+0x436>
                {
                    case DIO_OUTPUT_MODE:         SET_BIT(DDRD , pin);                     break;
     fd6:	a1 e3       	ldi	r26, 0x31	; 49
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8SetPinDirection+0x38e>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_u8SetPinDirection+0x38a>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	52 c0       	rjmp	.+164    	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_PULL_UP_MODE:  CLR_BIT(DDRD , pin); SET_BIT(PORTD,pin); break;
     ffe:	a1 e3       	ldi	r26, 0x31	; 49
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e1 e3       	ldi	r30, 0x31	; 49
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_u8SetPinDirection+0x3b4>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	2a 95       	dec	r18
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_u8SetPinDirection+0x3b0>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_u8SetPinDirection+0x3dc>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_u8SetPinDirection+0x3d8>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    case DIO_INPUT_FLOATING_MODE: CLR_BIT(DDRD , pin); CLR_BIT(PORTD,pin); break;
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinDirection+0x402>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	2a 95       	dec	r18
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinDirection+0x3fe>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8SetPinDirection+0x42a>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_u8SetPinDirection+0x426>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
                    default :ReturnValue=E_NOT_OK; break;
    109c:	19 82       	std	Y+1, r1	; 0x01
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <DIO_u8SetPinDirection+0x43c>
            
        }
    }
    else 
    {
         ReturnValue=E_NOT_OK;
    10a0:	19 82       	std	Y+1, r1	; 0x01
    }
    return ReturnValue;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a4:	2e 96       	adiw	r28, 0x0e	; 14
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue (DIO_PortType port ,DIO_PinType pin , DIO_PinLevel level)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2e 97       	sbiw	r28, 0x0e	; 14
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	6b 83       	std	Y+3, r22	; 0x03
    10ce:	4c 83       	std	Y+4, r20	; 0x04
    StdReturnType ReturnValue=E_OK;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
    if (pin>=DIO_PIN0 && pin<=DIO_PIN7)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_u8SetPinValue+0x26>
    10da:	06 c1       	rjmp	.+524    	; 0x12e8 <DIO_u8SetPinValue+0x232>
    {
        switch (port)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3e 87       	std	Y+14, r19	; 0x0e
    10e4:	2d 87       	std	Y+13, r18	; 0x0d
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <DIO_u8SetPinValue+0x3c>
    10f0:	50 c0       	rjmp	.+160    	; 0x1192 <DIO_u8SetPinValue+0xdc>
    10f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <DIO_u8SetPinValue+0x50>
    10fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	71 f0       	breq	.+28     	; 0x1120 <DIO_u8SetPinValue+0x6a>
    1104:	f2 c0       	rjmp	.+484    	; 0x12ea <DIO_u8SetPinValue+0x234>
    1106:	2d 85       	ldd	r18, Y+13	; 0x0d
    1108:	3e 85       	ldd	r19, Y+14	; 0x0e
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <DIO_u8SetPinValue+0x5c>
    1110:	79 c0       	rjmp	.+242    	; 0x1204 <DIO_u8SetPinValue+0x14e>
    1112:	8d 85       	ldd	r24, Y+13	; 0x0d
    1114:	9e 85       	ldd	r25, Y+14	; 0x0e
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_u8SetPinValue+0x68>
    111c:	ac c0       	rjmp	.+344    	; 0x1276 <DIO_u8SetPinValue+0x1c0>
    111e:	e5 c0       	rjmp	.+458    	; 0x12ea <DIO_u8SetPinValue+0x234>
        {
            case DIO_PORTA: 
                switch (level)
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 87       	std	Y+12, r19	; 0x0c
    1128:	2b 87       	std	Y+11, r18	; 0x0b
    112a:	8b 85       	ldd	r24, Y+11	; 0x0b
    112c:	9c 85       	ldd	r25, Y+12	; 0x0c
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	c9 f0       	breq	.+50     	; 0x1164 <DIO_u8SetPinValue+0xae>
    1132:	2b 85       	ldd	r18, Y+11	; 0x0b
    1134:	3c 85       	ldd	r19, Y+12	; 0x0c
    1136:	21 30       	cpi	r18, 0x01	; 1
    1138:	31 05       	cpc	r19, r1
    113a:	49 f5       	brne	.+82     	; 0x118e <DIO_u8SetPinValue+0xd8>
                {
                    case DIO_PIN_HIGH: SET_BIT(PORTA , pin); break;
    113c:	ab e3       	ldi	r26, 0x3B	; 59
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	eb e3       	ldi	r30, 0x3B	; 59
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0xa4>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0xa0>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	c3 c0       	rjmp	.+390    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    case DIO_PIN_LOW:  CLR_BIT(PORTA , pin); break;
    1164:	ab e3       	ldi	r26, 0x3B	; 59
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e3       	ldi	r30, 0x3B	; 59
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_u8SetPinValue+0xcc>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_u8SetPinValue+0xc8>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	ae c0       	rjmp	.+348    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    default :ReturnValue=E_NOT_OK; break;
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	ac c0       	rjmp	.+344    	; 0x12ea <DIO_u8SetPinValue+0x234>
                }
                break;
            case DIO_PORTB: 
                switch (level)
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3a 87       	std	Y+10, r19	; 0x0a
    119a:	29 87       	std	Y+9, r18	; 0x09
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	c9 f0       	breq	.+50     	; 0x11d6 <DIO_u8SetPinValue+0x120>
    11a4:	29 85       	ldd	r18, Y+9	; 0x09
    11a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	31 05       	cpc	r19, r1
    11ac:	49 f5       	brne	.+82     	; 0x1200 <DIO_u8SetPinValue+0x14a>
                {
                    case DIO_PIN_HIGH: SET_BIT(PORTB , pin); break;
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_u8SetPinValue+0x116>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_u8SetPinValue+0x112>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	8a c0       	rjmp	.+276    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    case DIO_PIN_LOW:  CLR_BIT(PORTB , pin); break;
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_u8SetPinValue+0x13e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_u8SetPinValue+0x13a>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	75 c0       	rjmp	.+234    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    default :ReturnValue=E_NOT_OK; break;
    1200:	19 82       	std	Y+1, r1	; 0x01
    1202:	73 c0       	rjmp	.+230    	; 0x12ea <DIO_u8SetPinValue+0x234>
                }
                break;
            case DIO_PORTC: 
                switch (level)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	38 87       	std	Y+8, r19	; 0x08
    120c:	2f 83       	std	Y+7, r18	; 0x07
    120e:	8f 81       	ldd	r24, Y+7	; 0x07
    1210:	98 85       	ldd	r25, Y+8	; 0x08
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	c9 f0       	breq	.+50     	; 0x1248 <DIO_u8SetPinValue+0x192>
    1216:	2f 81       	ldd	r18, Y+7	; 0x07
    1218:	38 85       	ldd	r19, Y+8	; 0x08
    121a:	21 30       	cpi	r18, 0x01	; 1
    121c:	31 05       	cpc	r19, r1
    121e:	49 f5       	brne	.+82     	; 0x1272 <DIO_u8SetPinValue+0x1bc>
                {
                    case DIO_PIN_HIGH: SET_BIT(PORTC , pin); break;
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_u8SetPinValue+0x188>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_u8SetPinValue+0x184>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	51 c0       	rjmp	.+162    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    case DIO_PIN_LOW:  CLR_BIT(PORTC , pin); break;
    1248:	a5 e3       	ldi	r26, 0x35	; 53
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e3       	ldi	r30, 0x35	; 53
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_u8SetPinValue+0x1b0>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_u8SetPinValue+0x1ac>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	3c c0       	rjmp	.+120    	; 0x12ea <DIO_u8SetPinValue+0x234>
                    default :ReturnValue=E_NOT_OK; break;
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	3a c0       	rjmp	.+116    	; 0x12ea <DIO_u8SetPinValue+0x234>
                }
                break;
            case DIO_PORTD: 
                switch (level)
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3e 83       	std	Y+6, r19	; 0x06
    127e:	2d 83       	std	Y+5, r18	; 0x05
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	c9 f0       	breq	.+50     	; 0x12ba <DIO_u8SetPinValue+0x204>
    1288:	2d 81       	ldd	r18, Y+5	; 0x05
    128a:	3e 81       	ldd	r19, Y+6	; 0x06
    128c:	21 30       	cpi	r18, 0x01	; 1
    128e:	31 05       	cpc	r19, r1
    1290:	49 f5       	brne	.+82     	; 0x12e4 <DIO_u8SetPinValue+0x22e>
                {
                    case DIO_PIN_HIGH: SET_BIT(PORTD , pin); break;
    1292:	a2 e3       	ldi	r26, 0x32	; 50
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8SetPinValue+0x1fa>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_u8SetPinValue+0x1f6>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	18 c0       	rjmp	.+48     	; 0x12ea <DIO_u8SetPinValue+0x234>
                    case DIO_PIN_LOW:  CLR_BIT(PORTD , pin); break;
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_u8SetPinValue+0x222>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_u8SetPinValue+0x21e>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <DIO_u8SetPinValue+0x234>
                    default :ReturnValue=E_NOT_OK; break;
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <DIO_u8SetPinValue+0x234>
            
        }
    }
    else 
    {
         ReturnValue=E_NOT_OK;
    12e8:	19 82       	std	Y+1, r1	; 0x01
    }
    return ReturnValue;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ec:	2e 96       	adiw	r28, 0x0e	; 14
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <DIO_u8GetPinValue>:

/*****************************************************************************/
u8 DIO_u8GetPinValue(DIO_PortType port ,DIO_PinType pin ,u8* Store_Result)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	27 97       	sbiw	r28, 0x07	; 7
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	8a 83       	std	Y+2, r24	; 0x02
    1314:	6b 83       	std	Y+3, r22	; 0x03
    1316:	5d 83       	std	Y+5, r21	; 0x05
    1318:	4c 83       	std	Y+4, r20	; 0x04
    StdReturnType ReturnValue = E_OK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    if (pin > DIO_PIN7)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	10 f0       	brcs	.+4      	; 0x1328 <DIO_u8GetPinValue+0x2a>
    {
        ReturnValue =E_NOT_OK;
    1324:	19 82       	std	Y+1, r1	; 0x01
    1326:	72 c0       	rjmp	.+228    	; 0x140c <DIO_u8GetPinValue+0x10e>
    }

    else 
    {
        switch (port)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3f 83       	std	Y+7, r19	; 0x07
    1330:	2e 83       	std	Y+6, r18	; 0x06
    1332:	4e 81       	ldd	r20, Y+6	; 0x06
    1334:	5f 81       	ldd	r21, Y+7	; 0x07
    1336:	41 30       	cpi	r20, 0x01	; 1
    1338:	51 05       	cpc	r21, r1
    133a:	59 f1       	breq	.+86     	; 0x1392 <DIO_u8GetPinValue+0x94>
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	91 05       	cpc	r25, r1
    1344:	34 f4       	brge	.+12     	; 0x1352 <DIO_u8GetPinValue+0x54>
    1346:	2e 81       	ldd	r18, Y+6	; 0x06
    1348:	3f 81       	ldd	r19, Y+7	; 0x07
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	69 f0       	breq	.+26     	; 0x136a <DIO_u8GetPinValue+0x6c>
    1350:	5c c0       	rjmp	.+184    	; 0x140a <DIO_u8GetPinValue+0x10c>
    1352:	4e 81       	ldd	r20, Y+6	; 0x06
    1354:	5f 81       	ldd	r21, Y+7	; 0x07
    1356:	42 30       	cpi	r20, 0x02	; 2
    1358:	51 05       	cpc	r21, r1
    135a:	79 f1       	breq	.+94     	; 0x13ba <DIO_u8GetPinValue+0xbc>
    135c:	8e 81       	ldd	r24, Y+6	; 0x06
    135e:	9f 81       	ldd	r25, Y+7	; 0x07
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <DIO_u8GetPinValue+0x6a>
    1366:	3d c0       	rjmp	.+122    	; 0x13e2 <DIO_u8GetPinValue+0xe4>
    1368:	50 c0       	rjmp	.+160    	; 0x140a <DIO_u8GetPinValue+0x10c>
        {
        case DIO_PORTA: *Store_Result=GET_BIT(PINA,pin); break;
    136a:	e9 e3       	ldi	r30, 0x39	; 57
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_u8GetPinValue+0x84>
    137e:	55 95       	asr	r21
    1380:	47 95       	ror	r20
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_u8GetPinValue+0x80>
    1386:	ca 01       	movw	r24, r20
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	ec 81       	ldd	r30, Y+4	; 0x04
    138c:	fd 81       	ldd	r31, Y+5	; 0x05
    138e:	80 83       	st	Z, r24
    1390:	3d c0       	rjmp	.+122    	; 0x140c <DIO_u8GetPinValue+0x10e>
        case DIO_PORTB: *Store_Result=GET_BIT(PINB,pin); break;
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a9 01       	movw	r20, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8GetPinValue+0xac>
    13a6:	55 95       	asr	r21
    13a8:	47 95       	ror	r20
    13aa:	8a 95       	dec	r24
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8GetPinValue+0xa8>
    13ae:	ca 01       	movw	r24, r20
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	ec 81       	ldd	r30, Y+4	; 0x04
    13b4:	fd 81       	ldd	r31, Y+5	; 0x05
    13b6:	80 83       	st	Z, r24
    13b8:	29 c0       	rjmp	.+82     	; 0x140c <DIO_u8GetPinValue+0x10e>
        case DIO_PORTC: *Store_Result=GET_BIT(PINC,pin); break;
    13ba:	e3 e3       	ldi	r30, 0x33	; 51
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8GetPinValue+0xd4>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_u8GetPinValue+0xd0>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	ec 81       	ldd	r30, Y+4	; 0x04
    13dc:	fd 81       	ldd	r31, Y+5	; 0x05
    13de:	80 83       	st	Z, r24
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <DIO_u8GetPinValue+0x10e>
        case DIO_PORTD: *Store_Result=GET_BIT(PIND,pin); break;
    13e2:	e0 e3       	ldi	r30, 0x30	; 48
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a9 01       	movw	r20, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8GetPinValue+0xfc>
    13f6:	55 95       	asr	r21
    13f8:	47 95       	ror	r20
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8GetPinValue+0xf8>
    13fe:	ca 01       	movw	r24, r20
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	ec 81       	ldd	r30, Y+4	; 0x04
    1404:	fd 81       	ldd	r31, Y+5	; 0x05
    1406:	80 83       	st	Z, r24
    1408:	01 c0       	rjmp	.+2      	; 0x140c <DIO_u8GetPinValue+0x10e>
        
        default: ReturnValue =E_NOT_OK; break;
    140a:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    return ReturnValue;
    140c:	89 81       	ldd	r24, Y+1	; 0x01


}
    140e:	27 96       	adiw	r28, 0x07	; 7
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <Dio_FlipPinLevel>:
/***************************************************************************/

DIO_LevelType Dio_FlipPinLevel(DIO_PortType port, DIO_PinType pin)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <Dio_FlipPinLevel+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <Dio_FlipPinLevel+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
	DIO_LevelType level = DIO_LOW;
    1432:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3d 83       	std	Y+5, r19	; 0x05
    143c:	2c 83       	std	Y+4, r18	; 0x04
    143e:	4c 81       	ldd	r20, Y+4	; 0x04
    1440:	5d 81       	ldd	r21, Y+5	; 0x05
    1442:	41 30       	cpi	r20, 0x01	; 1
    1444:	51 05       	cpc	r21, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <Dio_FlipPinLevel+0x2a>
    1448:	3c c0       	rjmp	.+120    	; 0x14c2 <Dio_FlipPinLevel+0xa2>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	34 f4       	brge	.+12     	; 0x1460 <Dio_FlipPinLevel+0x40>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	71 f0       	breq	.+28     	; 0x147a <Dio_FlipPinLevel+0x5a>
    145e:	9c c0       	rjmp	.+312    	; 0x1598 <Dio_FlipPinLevel+0x178>
    1460:	4c 81       	ldd	r20, Y+4	; 0x04
    1462:	5d 81       	ldd	r21, Y+5	; 0x05
    1464:	42 30       	cpi	r20, 0x02	; 2
    1466:	51 05       	cpc	r21, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <Dio_FlipPinLevel+0x4c>
    146a:	4f c0       	rjmp	.+158    	; 0x150a <Dio_FlipPinLevel+0xea>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <Dio_FlipPinLevel+0x58>
    1476:	6d c0       	rjmp	.+218    	; 0x1552 <Dio_FlipPinLevel+0x132>
    1478:	8f c0       	rjmp	.+286    	; 0x1598 <Dio_FlipPinLevel+0x178>
    {
    case DIO_PORTA:  TOG_BIT(PORTA, pin);  level = GET_BIT(PINA, pin);  break;
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Dio_FlipPinLevel+0x76>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	2a 95       	dec	r18
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <Dio_FlipPinLevel+0x72>
    149a:	84 27       	eor	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	e9 e3       	ldi	r30, 0x39	; 57
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <Dio_FlipPinLevel+0x96>
    14b2:	55 95       	asr	r21
    14b4:	47 95       	ror	r20
    14b6:	8a 95       	dec	r24
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <Dio_FlipPinLevel+0x92>
    14ba:	ca 01       	movw	r24, r20
    14bc:	81 70       	andi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	6b c0       	rjmp	.+214    	; 0x1598 <Dio_FlipPinLevel+0x178>
    case DIO_PORTB:  TOG_BIT(PORTB, pin);  level = GET_BIT(PINB, pin);  break;
    14c2:	a8 e3       	ldi	r26, 0x38	; 56
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <Dio_FlipPinLevel+0xbe>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	2a 95       	dec	r18
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <Dio_FlipPinLevel+0xba>
    14e2:	84 27       	eor	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	e6 e3       	ldi	r30, 0x36	; 54
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <Dio_FlipPinLevel+0xde>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <Dio_FlipPinLevel+0xda>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	47 c0       	rjmp	.+142    	; 0x1598 <Dio_FlipPinLevel+0x178>
    case DIO_PORTC:  TOG_BIT(PORTC, pin);  level = GET_BIT(PINC, pin);  break;
    150a:	a5 e3       	ldi	r26, 0x35	; 53
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <Dio_FlipPinLevel+0x106>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	2a 95       	dec	r18
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <Dio_FlipPinLevel+0x102>
    152a:	84 27       	eor	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	e3 e3       	ldi	r30, 0x33	; 51
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <Dio_FlipPinLevel+0x126>
    1542:	55 95       	asr	r21
    1544:	47 95       	ror	r20
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <Dio_FlipPinLevel+0x122>
    154a:	ca 01       	movw	r24, r20
    154c:	81 70       	andi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	23 c0       	rjmp	.+70     	; 0x1598 <Dio_FlipPinLevel+0x178>
    case DIO_PORTD:  TOG_BIT(PORTD, pin);  level = GET_BIT(PIND, pin);  break;
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <Dio_FlipPinLevel+0x14e>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	2a 95       	dec	r18
    1570:	e2 f7       	brpl	.-8      	; 0x156a <Dio_FlipPinLevel+0x14a>
    1572:	84 27       	eor	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	e0 e3       	ldi	r30, 0x30	; 48
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Dio_FlipPinLevel+0x16e>
    158a:	55 95       	asr	r21
    158c:	47 95       	ror	r20
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <Dio_FlipPinLevel+0x16a>
    1592:	ca 01       	movw	r24, r20
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	89 83       	std	Y+1, r24	; 0x01
    default:  break;
    }
    return level;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <__vector_1>:
static void (*pv_CallBackInit1)(void)=NULL;
static void (*pv_CallBackInit2)(void)=NULL;


ISR(VECTOR_INT0)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != pv_CallBackInit0)
    15d4:	80 91 74 00 	lds	r24, 0x0074
    15d8:	90 91 75 00 	lds	r25, 0x0075
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	29 f0       	breq	.+10     	; 0x15ea <__vector_1+0x40>
    {
        pv_CallBackInit0();
    15e0:	e0 91 74 00 	lds	r30, 0x0074
    15e4:	f0 91 75 00 	lds	r31, 0x0075
    15e8:	09 95       	icall
    }
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_2>:

ISR(VECTOR_INT1)
{
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != pv_CallBackInit1)
    163a:	80 91 76 00 	lds	r24, 0x0076
    163e:	90 91 77 00 	lds	r25, 0x0077
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	29 f0       	breq	.+10     	; 0x1650 <__vector_2+0x40>
    {
        pv_CallBackInit1();
    1646:	e0 91 76 00 	lds	r30, 0x0076
    164a:	f0 91 77 00 	lds	r31, 0x0077
    164e:	09 95       	icall
    }
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	0f 90       	pop	r0
    1672:	1f 90       	pop	r1
    1674:	18 95       	reti

00001676 <__vector_3>:

ISR(VECTOR_INT2)
{
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	4f 93       	push	r20
    1686:	5f 93       	push	r21
    1688:	6f 93       	push	r22
    168a:	7f 93       	push	r23
    168c:	8f 93       	push	r24
    168e:	9f 93       	push	r25
    1690:	af 93       	push	r26
    1692:	bf 93       	push	r27
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != pv_CallBackInit2)
    16a0:	80 91 78 00 	lds	r24, 0x0078
    16a4:	90 91 79 00 	lds	r25, 0x0079
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	29 f0       	breq	.+10     	; 0x16b6 <__vector_3+0x40>
    {
        pv_CallBackInit2();
    16ac:	e0 91 78 00 	lds	r30, 0x0078
    16b0:	f0 91 79 00 	lds	r31, 0x0079
    16b4:	09 95       	icall
    }
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <EXT_voidSetSenseControl>:


void EXT_voidSetSenseControl(EXTINIT_SenceControlType sense,EXTINIT_SourcType Source )
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	2a 97       	sbiw	r28, 0x0a	; 10
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	6a 83       	std	Y+2, r22	; 0x02
    switch (Source)
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3a 87       	std	Y+10, r19	; 0x0a
    16fc:	29 87       	std	Y+9, r18	; 0x09
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <EXT_voidSetSenseControl+0x2e>
    1708:	66 c0       	rjmp	.+204    	; 0x17d6 <EXT_voidSetSenseControl+0xfa>
    170a:	29 85       	ldd	r18, Y+9	; 0x09
    170c:	3a 85       	ldd	r19, Y+10	; 0x0a
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <EXT_voidSetSenseControl+0x3a>
    1714:	bb c0       	rjmp	.+374    	; 0x188c <EXT_voidSetSenseControl+0x1b0>
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	09 f0       	breq	.+2      	; 0x1720 <EXT_voidSetSenseControl+0x44>
    171e:	d5 c0       	rjmp	.+426    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
    {
    case EXTINIT_SOURCE_INIT0:
        switch (sense)
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	38 87       	std	Y+8, r19	; 0x08
    1728:	2f 83       	std	Y+7, r18	; 0x07
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	98 85       	ldd	r25, Y+8	; 0x08
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	21 f1       	breq	.+72     	; 0x177c <EXT_voidSetSenseControl+0xa0>
    1734:	2f 81       	ldd	r18, Y+7	; 0x07
    1736:	38 85       	ldd	r19, Y+8	; 0x08
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	2c f4       	brge	.+10     	; 0x1748 <EXT_voidSetSenseControl+0x6c>
    173e:	8f 81       	ldd	r24, Y+7	; 0x07
    1740:	98 85       	ldd	r25, Y+8	; 0x08
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	61 f0       	breq	.+24     	; 0x175e <EXT_voidSetSenseControl+0x82>
    1746:	c1 c0       	rjmp	.+386    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
    1748:	2f 81       	ldd	r18, Y+7	; 0x07
    174a:	38 85       	ldd	r19, Y+8	; 0x08
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	21 f1       	breq	.+72     	; 0x179a <EXT_voidSetSenseControl+0xbe>
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	71 f1       	breq	.+92     	; 0x17b8 <EXT_voidSetSenseControl+0xdc>
    175c:	b6 c0       	rjmp	.+364    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        {
        case EXTINIT_SENSE_LOW_LEVEL:    CLR_BIT(MCUCR,0);  CLR_BIT(MCUCR,1); break;
    175e:	a5 e5       	ldi	r26, 0x55	; 85
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e5       	ldi	r30, 0x55	; 85
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8e 7f       	andi	r24, 0xFE	; 254
    176a:	8c 93       	st	X, r24
    176c:	a5 e5       	ldi	r26, 0x55	; 85
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e5       	ldi	r30, 0x55	; 85
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8d 7f       	andi	r24, 0xFD	; 253
    1778:	8c 93       	st	X, r24
    177a:	a7 c0       	rjmp	.+334    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_ON_CHANGE:    SET_BIT(MCUCR,0);  CLR_BIT(MCUCR,1); break; 
    177c:	a5 e5       	ldi	r26, 0x55	; 85
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e5       	ldi	r30, 0x55	; 85
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	81 60       	ori	r24, 0x01	; 1
    1788:	8c 93       	st	X, r24
    178a:	a5 e5       	ldi	r26, 0x55	; 85
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e5       	ldi	r30, 0x55	; 85
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8d 7f       	andi	r24, 0xFD	; 253
    1796:	8c 93       	st	X, r24
    1798:	98 c0       	rjmp	.+304    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_FALLING_EDGE: CLR_BIT(MCUCR,0);  SET_BIT(MCUCR,1); break; 
    179a:	a5 e5       	ldi	r26, 0x55	; 85
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e5       	ldi	r30, 0x55	; 85
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8e 7f       	andi	r24, 0xFE	; 254
    17a6:	8c 93       	st	X, r24
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	8c 93       	st	X, r24
    17b6:	89 c0       	rjmp	.+274    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_RISING_EDGE:  SET_BIT(MCUCR,0);  SET_BIT(MCUCR,1); break; 
    17b8:	a5 e5       	ldi	r26, 0x55	; 85
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e5       	ldi	r30, 0x55	; 85
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	8c 93       	st	X, r24
    17c6:	a5 e5       	ldi	r26, 0x55	; 85
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e5       	ldi	r30, 0x55	; 85
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	8c 93       	st	X, r24
    17d4:	7a c0       	rjmp	.+244    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        default:    break;
        }
        break;
    case EXTINIT_SOURCE_INIT1:
        switch (sense)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3e 83       	std	Y+6, r19	; 0x06
    17de:	2d 83       	std	Y+5, r18	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	21 f1       	breq	.+72     	; 0x1832 <EXT_voidSetSenseControl+0x156>
    17ea:	2d 81       	ldd	r18, Y+5	; 0x05
    17ec:	3e 81       	ldd	r19, Y+6	; 0x06
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	2c f4       	brge	.+10     	; 0x17fe <EXT_voidSetSenseControl+0x122>
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	61 f0       	breq	.+24     	; 0x1814 <EXT_voidSetSenseControl+0x138>
    17fc:	66 c0       	rjmp	.+204    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
    17fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1800:	3e 81       	ldd	r19, Y+6	; 0x06
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	21 f1       	breq	.+72     	; 0x1850 <EXT_voidSetSenseControl+0x174>
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	71 f1       	breq	.+92     	; 0x186e <EXT_voidSetSenseControl+0x192>
    1812:	5b c0       	rjmp	.+182    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        {
        case EXTINIT_SENSE_LOW_LEVEL:    CLR_BIT(MCUCR,2);  CLR_BIT(MCUCR,3); break;
    1814:	a5 e5       	ldi	r26, 0x55	; 85
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e5       	ldi	r30, 0x55	; 85
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8b 7f       	andi	r24, 0xFB	; 251
    1820:	8c 93       	st	X, r24
    1822:	a5 e5       	ldi	r26, 0x55	; 85
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e5       	ldi	r30, 0x55	; 85
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	87 7f       	andi	r24, 0xF7	; 247
    182e:	8c 93       	st	X, r24
    1830:	4c c0       	rjmp	.+152    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_ON_CHANGE:    SET_BIT(MCUCR,2);  CLR_BIT(MCUCR,3); break; 
    1832:	a5 e5       	ldi	r26, 0x55	; 85
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e5       	ldi	r30, 0x55	; 85
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	84 60       	ori	r24, 0x04	; 4
    183e:	8c 93       	st	X, r24
    1840:	a5 e5       	ldi	r26, 0x55	; 85
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e5       	ldi	r30, 0x55	; 85
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	87 7f       	andi	r24, 0xF7	; 247
    184c:	8c 93       	st	X, r24
    184e:	3d c0       	rjmp	.+122    	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_FALLING_EDGE: CLR_BIT(MCUCR,2);  SET_BIT(MCUCR,3); break; 
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8b 7f       	andi	r24, 0xFB	; 251
    185c:	8c 93       	st	X, r24
    185e:	a5 e5       	ldi	r26, 0x55	; 85
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e5       	ldi	r30, 0x55	; 85
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 93       	st	X, r24
    186c:	2e c0       	rjmp	.+92     	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_RISING_EDGE:  SET_BIT(MCUCR,2);  SET_BIT(MCUCR,3); break; 
    186e:	a5 e5       	ldi	r26, 0x55	; 85
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e5       	ldi	r30, 0x55	; 85
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	84 60       	ori	r24, 0x04	; 4
    187a:	8c 93       	st	X, r24
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	8c 93       	st	X, r24
    188a:	1f c0       	rjmp	.+62     	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        default:    break;
        }
        break;
    case EXTINIT_SOURCE_INIT2:
        switch (sense)
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3c 83       	std	Y+4, r19	; 0x04
    1894:	2b 83       	std	Y+3, r18	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	91 05       	cpc	r25, r1
    189e:	31 f0       	breq	.+12     	; 0x18ac <EXT_voidSetSenseControl+0x1d0>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	23 30       	cpi	r18, 0x03	; 3
    18a6:	31 05       	cpc	r19, r1
    18a8:	49 f0       	breq	.+18     	; 0x18bc <EXT_voidSetSenseControl+0x1e0>
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        {
        case EXTINIT_SENSE_FALLING_EDGE: CLR_BIT(MCUCSR,6);   break; 
    18ac:	a4 e5       	ldi	r26, 0x54	; 84
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e5       	ldi	r30, 0x54	; 84
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 7b       	andi	r24, 0xBF	; 191
    18b8:	8c 93       	st	X, r24
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <EXT_voidSetSenseControl+0x1ee>
        case EXTINIT_SENSE_RISING_EDGE:  SET_BIT(MCUCSR,6);   break; 
    18bc:	a4 e5       	ldi	r26, 0x54	; 84
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e5       	ldi	r30, 0x54	; 84
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	8c 93       	st	X, r24
        }
        break;
    
    default:   break;
    }
}
    18ca:	2a 96       	adiw	r28, 0x0a	; 10
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <EXT_voidEnableInterrupt>:

void EXT_voidEnableInterrupt(EXTINIT_SourcType Source)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <EXT_voidEnableInterrupt+0x6>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	89 83       	std	Y+1, r24	; 0x01
    switch (Source)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3b 83       	std	Y+3, r19	; 0x03
    18f2:	2a 83       	std	Y+2, r18	; 0x02
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	89 f0       	breq	.+34     	; 0x1920 <EXT_voidEnableInterrupt+0x44>
    18fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1900:	3b 81       	ldd	r19, Y+3	; 0x03
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	a1 f0       	breq	.+40     	; 0x1930 <EXT_voidEnableInterrupt+0x54>
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	b9 f4       	brne	.+46     	; 0x193e <EXT_voidEnableInterrupt+0x62>
    {
    case EXTINIT_SOURCE_INIT0: SET_BIT(GICR,6); break;
    1910:	ab e5       	ldi	r26, 0x5B	; 91
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e5       	ldi	r30, 0x5B	; 91
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	8c 93       	st	X, r24
    191e:	0f c0       	rjmp	.+30     	; 0x193e <EXT_voidEnableInterrupt+0x62>
    case EXTINIT_SOURCE_INIT1: SET_BIT(GICR,7); break;
    1920:	ab e5       	ldi	r26, 0x5B	; 91
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e5       	ldi	r30, 0x5B	; 91
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 68       	ori	r24, 0x80	; 128
    192c:	8c 93       	st	X, r24
    192e:	07 c0       	rjmp	.+14     	; 0x193e <EXT_voidEnableInterrupt+0x62>
    case EXTINIT_SOURCE_INIT2: SET_BIT(GICR,5); break;
    1930:	ab e5       	ldi	r26, 0x5B	; 91
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb e5       	ldi	r30, 0x5B	; 91
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 62       	ori	r24, 0x20	; 32
    193c:	8c 93       	st	X, r24
    
    default:  break;
    }
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <EXT_voidDisableInterrupt>:

void EXT_voidDisableInterrupt(EXTINIT_SourcType Source)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <EXT_voidDisableInterrupt+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    switch (Source)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3b 83       	std	Y+3, r19	; 0x03
    1960:	2a 83       	std	Y+2, r18	; 0x02
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	89 f0       	breq	.+34     	; 0x198e <EXT_voidDisableInterrupt+0x44>
    196c:	2a 81       	ldd	r18, Y+2	; 0x02
    196e:	3b 81       	ldd	r19, Y+3	; 0x03
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	a1 f0       	breq	.+40     	; 0x199e <EXT_voidDisableInterrupt+0x54>
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	b9 f4       	brne	.+46     	; 0x19ac <EXT_voidDisableInterrupt+0x62>
    {
    case EXTINIT_SOURCE_INIT0: CLR_BIT(GICR,6); break;
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7b       	andi	r24, 0xBF	; 191
    198a:	8c 93       	st	X, r24
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <EXT_voidDisableInterrupt+0x62>
    case EXTINIT_SOURCE_INIT1: CLR_BIT(GICR,7); break;
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	8c 93       	st	X, r24
    199c:	07 c0       	rjmp	.+14     	; 0x19ac <EXT_voidDisableInterrupt+0x62>
    case EXTINIT_SOURCE_INIT2: CLR_BIT(GICR,5); break;
    199e:	ab e5       	ldi	r26, 0x5B	; 91
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e5       	ldi	r30, 0x5B	; 91
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 7d       	andi	r24, 0xDF	; 223
    19aa:	8c 93       	st	X, r24
 
    default:  break;
    }
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <EXT_voidSetCallBack>:

void EXT_voidSetCallBack(EXTINIT_SourcType Source,void(*pv_CallBack) (void))
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <EXT_voidSetCallBack+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <EXT_voidSetCallBack+0x8>
    19c0:	0f 92       	push	r0
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	7b 83       	std	Y+3, r23	; 0x03
    19ca:	6a 83       	std	Y+2, r22	; 0x02
    switch (Source)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3d 83       	std	Y+5, r19	; 0x05
    19d4:	2c 83       	std	Y+4, r18	; 0x04
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	9d 81       	ldd	r25, Y+5	; 0x05
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	91 05       	cpc	r25, r1
    19de:	a1 f0       	breq	.+40     	; 0x1a08 <EXT_voidSetCallBack+0x50>
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	d1 f0       	breq	.+52     	; 0x1a1e <EXT_voidSetCallBack+0x66>
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	01 f5       	brne	.+64     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
    {
    case EXTINIT_SOURCE_INIT0: 
        if (pv_CallBack!=NULL)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	e1 f0       	breq	.+56     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
        {
            pv_CallBackInit0=pv_CallBack;
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	90 93 75 00 	sts	0x0075, r25
    1a02:	80 93 74 00 	sts	0x0074, r24
    1a06:	15 c0       	rjmp	.+42     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
        }
    break;

    case EXTINIT_SOURCE_INIT1: 
        if (pv_CallBack!=NULL)
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	89 f0       	breq	.+34     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
        {
            pv_CallBackInit1=pv_CallBack;
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	9b 81       	ldd	r25, Y+3	; 0x03
    1a14:	90 93 77 00 	sts	0x0077, r25
    1a18:	80 93 76 00 	sts	0x0076, r24
    1a1c:	0a c0       	rjmp	.+20     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
        }
    break;

    case EXTINIT_SOURCE_INIT2: 
        if (pv_CallBack!=NULL)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	9b 81       	ldd	r25, Y+3	; 0x03
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	31 f0       	breq	.+12     	; 0x1a32 <EXT_voidSetCallBack+0x7a>
        {
            pv_CallBackInit2=pv_CallBack;
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	90 93 79 00 	sts	0x0079, r25
    1a2e:	80 93 78 00 	sts	0x0078, r24
    break;
    
    default:  break;
    }

}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <GIE_voidEnable>:
#include"GIE_private.h"
#include"GIE_private.h"
#include"GIE_register.h"

void GIE_voidEnable(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
    1a4a:	af e5       	ldi	r26, 0x5F	; 95
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ef e5       	ldi	r30, 0x5F	; 95
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 68       	ori	r24, 0x80	; 128
    1a56:	8c 93       	st	X, r24
}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    1a66:	af e5       	ldi	r26, 0x5F	; 95
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ef e5       	ldi	r30, 0x5F	; 95
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 77       	andi	r24, 0x7F	; 127
    1a72:	8c 93       	st	X, r24
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_interface.h"


void LCD_voidInit ()
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	/*   Set LCD Pins to Output "Controle pins only "   */
	DIO_u8SetPinDirection(LCD_CONTROL_PORT,LCD_RS,DIO_OUTPUT_MODE);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT,LCD_RW,DIO_OUTPUT_MODE);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT,LCD_EN,DIO_OUTPUT_MODE);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>

#if (LCD_MODE == LCD_MODE_4_BIT)
	/* Enter 4-Bit Mode */
	//Lcd_SendCommand(0x02);
	/* make the four bits of the lcd output mode */
	DIO_u8SetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN4,DIO_OUTPUT_MODE);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	64 e0       	ldi	r22, 0x04	; 4
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN5,DIO_OUTPUT_MODE);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	65 e0       	ldi	r22, 0x05	; 5
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN6,DIO_OUTPUT_MODE);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	66 e0       	ldi	r22, 0x06	; 6
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_DATA_PORT,LCD_DATA_PIN7,DIO_OUTPUT_MODE);
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	67 e0       	ldi	r22, 0x07	; 7
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>

	LCD_voidSendCommend(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1ac8:	83 e3       	ldi	r24, 0x33	; 51
    1aca:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>
	LCD_voidSendCommend(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1ace:	82 e3       	ldi	r24, 0x32	; 50
    1ad0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>
	LCD_voidSendCommend(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ad4:	88 e2       	ldi	r24, 0x28	; 40
    1ad6:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>

#endif

	/* Display Control (D=1: Display ON, C=1: Cursor ON, B=1, Cursor Blinks) (0 0 0 0 1 D C B) */
	LCD_voidSendCommend(LCD_CURSOR_ON);
    1ada:	8e e0       	ldi	r24, 0x0E	; 14
    1adc:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>
	/* Display Clear */
	LCD_voidSendCommend(LCD_CLEAR_COMMAND);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <LCD_voidSendCommend>:


void LCD_voidSendCommend (u8 Copy_u8Commend)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	6d 97       	sbiw	r28, 0x1d	; 29
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
	/* clear the value of the register select */
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS,DIO_PIN_LOW);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	/* Clear the value of the register Write  */
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW,DIO_PIN_LOW);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Commend);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
#elif (LCD_MODE == LCD_MODE_4_BIT)
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN4, GET_BIT(Copy_u8Commend, 4));
    1b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b18:	82 95       	swap	r24
    1b1a:	8f 70       	andi	r24, 0x0F	; 15
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	91 70       	andi	r25, 0x01	; 1
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	64 e0       	ldi	r22, 0x04	; 4
    1b24:	49 2f       	mov	r20, r25
    1b26:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN5, GET_BIT(Copy_u8Commend, 5));
    1b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2c:	82 95       	swap	r24
    1b2e:	86 95       	lsr	r24
    1b30:	87 70       	andi	r24, 0x07	; 7
    1b32:	98 2f       	mov	r25, r24
    1b34:	91 70       	andi	r25, 0x01	; 1
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	65 e0       	ldi	r22, 0x05	; 5
    1b3a:	49 2f       	mov	r20, r25
    1b3c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN6, GET_BIT(Copy_u8Commend, 6));
    1b40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b42:	82 95       	swap	r24
    1b44:	86 95       	lsr	r24
    1b46:	86 95       	lsr	r24
    1b48:	83 70       	andi	r24, 0x03	; 3
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	91 70       	andi	r25, 0x01	; 1
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	66 e0       	ldi	r22, 0x06	; 6
    1b52:	49 2f       	mov	r20, r25
    1b54:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN7, GET_BIT(Copy_u8Commend, 7));
    1b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5a:	98 2f       	mov	r25, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	99 27       	eor	r25, r25
    1b60:	99 1f       	adc	r25, r25
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	49 2f       	mov	r20, r25
    1b68:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e4       	ldi	r27, 0x40	; 64
    1b7e:	89 8f       	std	Y+25, r24	; 0x19
    1b80:	9a 8f       	std	Y+26, r25	; 0x1a
    1b82:	ab 8f       	std	Y+27, r26	; 0x1b
    1b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	69 8d       	ldd	r22, Y+25	; 0x19
    1b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ba0:	9e 8b       	std	Y+22, r25	; 0x16
    1ba2:	af 8b       	std	Y+23, r26	; 0x17
    1ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_voidSendCommend+0xdc>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_voidSendCommend+0x15a>
	else if (__tmp > 65535)
    1bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bca:	7e 89       	ldd	r23, Y+22	; 0x16
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_voidSendCommend+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_voidSendCommend+0x13c>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c12:	89 89       	ldd	r24, Y+17	; 0x11
    1c14:	9a 89       	ldd	r25, Y+18	; 0x12
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_voidSendCommend+0x12a>
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_voidSendCommend+0x11e>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_voidSendCommend+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	98 89       	ldd	r25, Y+16	; 0x10
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_voidSendCommend+0x166>
    1c56:	98 8b       	std	Y+16, r25	; 0x10
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN4, GET_BIT(Copy_u8Commend, 0));
    1c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c66:	98 2f       	mov	r25, r24
    1c68:	91 70       	andi	r25, 0x01	; 1
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	64 e0       	ldi	r22, 0x04	; 4
    1c6e:	49 2f       	mov	r20, r25
    1c70:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN5, GET_BIT(Copy_u8Commend, 1));
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	86 95       	lsr	r24
    1c78:	98 2f       	mov	r25, r24
    1c7a:	91 70       	andi	r25, 0x01	; 1
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	65 e0       	ldi	r22, 0x05	; 5
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN6, GET_BIT(Copy_u8Commend, 2));
    1c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c88:	86 95       	lsr	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	91 70       	andi	r25, 0x01	; 1
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	66 e0       	ldi	r22, 0x06	; 6
    1c94:	49 2f       	mov	r20, r25
    1c96:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN7, GET_BIT(Copy_u8Commend, 3));
    1c9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c9c:	86 95       	lsr	r24
    1c9e:	86 95       	lsr	r24
    1ca0:	86 95       	lsr	r24
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	91 70       	andi	r25, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	67 e0       	ldi	r22, 0x07	; 7
    1caa:	49 2f       	mov	r20, r25
    1cac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e4       	ldi	r27, 0x40	; 64
    1cc2:	8b 87       	std	Y+11, r24	; 0x0b
    1cc4:	9c 87       	std	Y+12, r25	; 0x0c
    1cc6:	ad 87       	std	Y+13, r26	; 0x0d
    1cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a ef       	ldi	r20, 0xFA	; 250
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8f 83       	std	Y+7, r24	; 0x07
    1ce4:	98 87       	std	Y+8, r25	; 0x08
    1ce6:	a9 87       	std	Y+9, r26	; 0x09
    1ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_voidSendCommend+0x220>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <LCD_voidSendCommend+0x29e>
	else if (__tmp > 65535)
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <LCD_voidSendCommend+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_voidSendCommend+0x280>
    1d4e:	88 ec       	ldi	r24, 0xC8	; 200
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_voidSendCommend+0x26e>
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <LCD_voidSendCommend+0x262>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <LCD_voidSendCommend+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_voidSendCommend+0x2aa>
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
#else
#error "[LCD]: Invalid LCD Mode, Options: LCD_MODE_4_BIT, LCD_MODE_8_BIT"
#endif
}
    1da8:	6d 96       	adiw	r28, 0x1d	; 29
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <LCD_voidSendData>:



void LCD_voidSendData (u8 Copy_u8Data)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	e9 97       	sbiw	r28, 0x39	; 57
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	89 af       	std	Y+57, r24	; 0x39
	/* clear the value of the register select */
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS,DIO_PIN_HIGH);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	/* Clear the value of the register Write  */
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW,DIO_PIN_LOW);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
	_delay_ms(2);
#elif (LCD_MODE == LCD_MODE_4_BIT)
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN4, GET_BIT(Copy_u8Data, 4));
    1de4:	89 ad       	ldd	r24, Y+57	; 0x39
    1de6:	82 95       	swap	r24
    1de8:	8f 70       	andi	r24, 0x0F	; 15
    1dea:	98 2f       	mov	r25, r24
    1dec:	91 70       	andi	r25, 0x01	; 1
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	64 e0       	ldi	r22, 0x04	; 4
    1df2:	49 2f       	mov	r20, r25
    1df4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN5, GET_BIT(Copy_u8Data, 5));
    1df8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dfa:	82 95       	swap	r24
    1dfc:	86 95       	lsr	r24
    1dfe:	87 70       	andi	r24, 0x07	; 7
    1e00:	98 2f       	mov	r25, r24
    1e02:	91 70       	andi	r25, 0x01	; 1
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	65 e0       	ldi	r22, 0x05	; 5
    1e08:	49 2f       	mov	r20, r25
    1e0a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN6, GET_BIT(Copy_u8Data, 6));
    1e0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e10:	82 95       	swap	r24
    1e12:	86 95       	lsr	r24
    1e14:	86 95       	lsr	r24
    1e16:	83 70       	andi	r24, 0x03	; 3
    1e18:	98 2f       	mov	r25, r24
    1e1a:	91 70       	andi	r25, 0x01	; 1
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	66 e0       	ldi	r22, 0x06	; 6
    1e20:	49 2f       	mov	r20, r25
    1e22:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN7, GET_BIT(Copy_u8Data, 7));
    1e26:	89 ad       	ldd	r24, Y+57	; 0x39
    1e28:	98 2f       	mov	r25, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	99 27       	eor	r25, r25
    1e2e:	99 1f       	adc	r25, r25
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	67 e0       	ldi	r22, 0x07	; 7
    1e34:	49 2f       	mov	r20, r25
    1e36:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e4       	ldi	r27, 0x40	; 64
    1e4c:	8d ab       	std	Y+53, r24	; 0x35
    1e4e:	9e ab       	std	Y+54, r25	; 0x36
    1e50:	af ab       	std	Y+55, r26	; 0x37
    1e52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	6d a9       	ldd	r22, Y+53	; 0x35
    1e56:	7e a9       	ldd	r23, Y+54	; 0x36
    1e58:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a ef       	ldi	r20, 0xFA	; 250
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	89 ab       	std	Y+49, r24	; 0x31
    1e6e:	9a ab       	std	Y+50, r25	; 0x32
    1e70:	ab ab       	std	Y+51, r26	; 0x33
    1e72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e74:	69 a9       	ldd	r22, Y+49	; 0x31
    1e76:	7a a9       	ldd	r23, Y+50	; 0x32
    1e78:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <LCD_voidSendData+0xdc>
		__ticks = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	98 ab       	std	Y+48, r25	; 0x30
    1e92:	8f a7       	std	Y+47, r24	; 0x2f
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <LCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    1e96:	69 a9       	ldd	r22, Y+49	; 0x31
    1e98:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	57 e4       	ldi	r21, 0x47	; 71
    1ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	4c f5       	brge	.+82     	; 0x1f00 <LCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	6d a9       	ldd	r22, Y+53	; 0x35
    1eb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1eb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	98 ab       	std	Y+48, r25	; 0x30
    1ed4:	8f a7       	std	Y+47, r24	; 0x2f
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <LCD_voidSendData+0x13c>
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9e a7       	std	Y+46, r25	; 0x2e
    1ede:	8d a7       	std	Y+45, r24	; 0x2d
    1ee0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ee2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_voidSendData+0x12a>
    1ee8:	9e a7       	std	Y+46, r25	; 0x2e
    1eea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eee:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	98 ab       	std	Y+48, r25	; 0x30
    1ef4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <LCD_voidSendData+0x11e>
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <LCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	69 a9       	ldd	r22, Y+49	; 0x31
    1f02:	7a a9       	ldd	r23, Y+50	; 0x32
    1f04:	8b a9       	ldd	r24, Y+51	; 0x33
    1f06:	9c a9       	ldd	r25, Y+52	; 0x34
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f16:	98 a9       	ldd	r25, Y+48	; 0x30
    1f18:	9c a7       	std	Y+44, r25	; 0x2c
    1f1a:	8b a7       	std	Y+43, r24	; 0x2b
    1f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_voidSendData+0x166>
    1f24:	9c a7       	std	Y+44, r25	; 0x2c
    1f26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	b0 e4       	ldi	r27, 0x40	; 64
    1f3a:	8f a3       	std	Y+39, r24	; 0x27
    1f3c:	98 a7       	std	Y+40, r25	; 0x28
    1f3e:	a9 a7       	std	Y+41, r26	; 0x29
    1f40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6f a1       	ldd	r22, Y+39	; 0x27
    1f44:	78 a5       	ldd	r23, Y+40	; 0x28
    1f46:	89 a5       	ldd	r24, Y+41	; 0x29
    1f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a ef       	ldi	r20, 0xFA	; 250
    1f50:	54 e4       	ldi	r21, 0x44	; 68
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8b a3       	std	Y+35, r24	; 0x23
    1f5c:	9c a3       	std	Y+36, r25	; 0x24
    1f5e:	ad a3       	std	Y+37, r26	; 0x25
    1f60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f62:	6b a1       	ldd	r22, Y+35	; 0x23
    1f64:	7c a1       	ldd	r23, Y+36	; 0x24
    1f66:	8d a1       	ldd	r24, Y+37	; 0x25
    1f68:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <LCD_voidSendData+0x1ca>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9a a3       	std	Y+34, r25	; 0x22
    1f80:	89 a3       	std	Y+33, r24	; 0x21
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <LCD_voidSendData+0x248>
	else if (__tmp > 65535)
    1f84:	6b a1       	ldd	r22, Y+35	; 0x23
    1f86:	7c a1       	ldd	r23, Y+36	; 0x24
    1f88:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <LCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9a a3       	std	Y+34, r25	; 0x22
    1fc2:	89 a3       	std	Y+33, r24	; 0x21
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <LCD_voidSendData+0x22a>
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	98 a3       	std	Y+32, r25	; 0x20
    1fcc:	8f 8f       	std	Y+31, r24	; 0x1f
    1fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fd0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_voidSendData+0x218>
    1fd6:	98 a3       	std	Y+32, r25	; 0x20
    1fd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9a a3       	std	Y+34, r25	; 0x22
    1fe2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <LCD_voidSendData+0x20c>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <LCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	89 a1       	ldd	r24, Y+33	; 0x21
    2004:	9a a1       	ldd	r25, Y+34	; 0x22
    2006:	9e 8f       	std	Y+30, r25	; 0x1e
    2008:	8d 8f       	std	Y+29, r24	; 0x1d
    200a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    200c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_voidSendData+0x254>
    2012:	9e 8f       	std	Y+30, r25	; 0x1e
    2014:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN4, GET_BIT(Copy_u8Data, 0));
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	98 2f       	mov	r25, r24
    201a:	91 70       	andi	r25, 0x01	; 1
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	64 e0       	ldi	r22, 0x04	; 4
    2020:	49 2f       	mov	r20, r25
    2022:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN5, GET_BIT(Copy_u8Data, 1));
    2026:	89 ad       	ldd	r24, Y+57	; 0x39
    2028:	86 95       	lsr	r24
    202a:	98 2f       	mov	r25, r24
    202c:	91 70       	andi	r25, 0x01	; 1
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	65 e0       	ldi	r22, 0x05	; 5
    2032:	49 2f       	mov	r20, r25
    2034:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN6, GET_BIT(Copy_u8Data, 2));
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	86 95       	lsr	r24
    203c:	86 95       	lsr	r24
    203e:	98 2f       	mov	r25, r24
    2040:	91 70       	andi	r25, 0x01	; 1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	66 e0       	ldi	r22, 0x06	; 6
    2046:	49 2f       	mov	r20, r25
    2048:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT,LCD_DATA_PIN7, GET_BIT(Copy_u8Data, 3));
    204c:	89 ad       	ldd	r24, Y+57	; 0x39
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	98 2f       	mov	r25, r24
    2056:	91 70       	andi	r25, 0x01	; 1
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	67 e0       	ldi	r22, 0x07	; 7
    205c:	49 2f       	mov	r20, r25
    205e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_HIGH);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	b0 e4       	ldi	r27, 0x40	; 64
    2074:	89 8f       	std	Y+25, r24	; 0x19
    2076:	9a 8f       	std	Y+26, r25	; 0x1a
    2078:	ab 8f       	std	Y+27, r26	; 0x1b
    207a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8d 8b       	std	Y+21, r24	; 0x15
    2096:	9e 8b       	std	Y+22, r25	; 0x16
    2098:	af 8b       	std	Y+23, r26	; 0x17
    209a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_voidSendData+0x304>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_voidSendData+0x382>
	else if (__tmp > 65535)
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_voidSendData+0x364>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	9a 89       	ldd	r25, Y+18	; 0x12
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_voidSendData+0x352>
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_voidSendData+0x346>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	98 89       	ldd	r25, Y+16	; 0x10
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_voidSendData+0x38e>
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_EN, DIO_PIN_LOW);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8SetPinValue>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e0       	ldi	r26, 0x00	; 0
    2160:	b0 e4       	ldi	r27, 0x40	; 64
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <LCD_voidSendData+0x3f2>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <LCD_voidSendData+0x470>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <LCD_voidSendData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <LCD_voidSendData+0x452>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_voidSendData+0x440>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <LCD_voidSendData+0x434>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <LCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_voidSendData+0x47c>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "[LCD]: Invalid LCD Mode, Options: LCD_MODE_4_BIT, LCD_MODE_8_BIT"
#endif
}
    223e:	e9 96       	adiw	r28, 0x39	; 57
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <LCD_voidDispalyNumber>:

void LCD_voidDispalyNumber  (s32 Copy_u8Number )
{
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	29 97       	sbiw	r28, 0x09	; 9
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	6e 83       	std	Y+6, r22	; 0x06
    226e:	7f 83       	std	Y+7, r23	; 0x07
    2270:	88 87       	std	Y+8, r24	; 0x08
    2272:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8DigitsCounter=0 ;
    2274:	1d 82       	std	Y+5, r1	; 0x05
	u32 Resvered=0 ;
    2276:	19 82       	std	Y+1, r1	; 0x01
    2278:	1a 82       	std	Y+2, r1	; 0x02
    227a:	1b 82       	std	Y+3, r1	; 0x03
    227c:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u8Number<0)
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	a8 85       	ldd	r26, Y+8	; 0x08
    2284:	b9 85       	ldd	r27, Y+9	; 0x09
    2286:	bb 23       	and	r27, r27
    2288:	94 f4       	brge	.+36     	; 0x22ae <LCD_voidDispalyNumber+0x5e>
	{
		LCD_voidSendData('-');
    228a:	8d e2       	ldi	r24, 0x2D	; 45
    228c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_voidSendData>
		Copy_u8Number *= -1;
    2290:	8e 81       	ldd	r24, Y+6	; 0x06
    2292:	9f 81       	ldd	r25, Y+7	; 0x07
    2294:	a8 85       	ldd	r26, Y+8	; 0x08
    2296:	b9 85       	ldd	r27, Y+9	; 0x09
    2298:	b0 95       	com	r27
    229a:	a0 95       	com	r26
    229c:	90 95       	com	r25
    229e:	81 95       	neg	r24
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	af 4f       	sbci	r26, 0xFF	; 255
    22a4:	bf 4f       	sbci	r27, 0xFF	; 255
    22a6:	8e 83       	std	Y+6, r24	; 0x06
    22a8:	9f 83       	std	Y+7, r25	; 0x07
    22aa:	a8 87       	std	Y+8, r26	; 0x08
    22ac:	b9 87       	std	Y+9, r27	; 0x09
	}

	do
	{
		Local_u8DigitsCounter++;
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	8d 83       	std	Y+5, r24	; 0x05
		Resvered = (Resvered * 10) + (Copy_u8Number%10);
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	ab 81       	ldd	r26, Y+3	; 0x03
    22ba:	bc 81       	ldd	r27, Y+4	; 0x04
    22bc:	2a e0       	ldi	r18, 0x0A	; 10
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsi3>
    22cc:	7b 01       	movw	r14, r22
    22ce:	8c 01       	movw	r16, r24
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	a8 85       	ldd	r26, Y+8	; 0x08
    22d6:	b9 85       	ldd	r27, Y+9	; 0x09
    22d8:	2a e0       	ldi	r18, 0x0A	; 10
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__divmodsi4>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8e 0d       	add	r24, r14
    22ee:	9f 1d       	adc	r25, r15
    22f0:	a0 1f       	adc	r26, r16
    22f2:	b1 1f       	adc	r27, r17
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	ab 83       	std	Y+3, r26	; 0x03
    22fa:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u8Number /=10;
    22fc:	8e 81       	ldd	r24, Y+6	; 0x06
    22fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2300:	a8 85       	ldd	r26, Y+8	; 0x08
    2302:	b9 85       	ldd	r27, Y+9	; 0x09
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__divmodsi4>
    2314:	da 01       	movw	r26, r20
    2316:	c9 01       	movw	r24, r18
    2318:	8e 83       	std	Y+6, r24	; 0x06
    231a:	9f 83       	std	Y+7, r25	; 0x07
    231c:	a8 87       	std	Y+8, r26	; 0x08
    231e:	b9 87       	std	Y+9, r27	; 0x09

	}while (Copy_u8Number != 0);
    2320:	8e 81       	ldd	r24, Y+6	; 0x06
    2322:	9f 81       	ldd	r25, Y+7	; 0x07
    2324:	a8 85       	ldd	r26, Y+8	; 0x08
    2326:	b9 85       	ldd	r27, Y+9	; 0x09
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	a1 05       	cpc	r26, r1
    232c:	b1 05       	cpc	r27, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <LCD_voidDispalyNumber+0xe2>
    2330:	be cf       	rjmp	.-132    	; 0x22ae <LCD_voidDispalyNumber+0x5e>
    2332:	26 c0       	rjmp	.+76     	; 0x2380 <LCD_voidDispalyNumber+0x130>

	while (Local_u8DigitsCounter > 0)
	{
		LCD_voidSendData (Resvered %10 + '0');
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	ab 81       	ldd	r26, Y+3	; 0x03
    233a:	bc 81       	ldd	r27, Y+4	; 0x04
    233c:	2a e0       	ldi	r18, 0x0A	; 10
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodsi4>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	80 5d       	subi	r24, 0xD0	; 208
    2352:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_voidSendData>
		Resvered /=10;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	2a e0       	ldi	r18, 0x0A	; 10
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodsi4>
    236e:	da 01       	movw	r26, r20
    2370:	c9 01       	movw	r24, r18
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	ab 83       	std	Y+3, r26	; 0x03
    2378:	bc 83       	std	Y+4, r27	; 0x04
		Local_u8DigitsCounter --;
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	8d 83       	std	Y+5, r24	; 0x05
		Resvered = (Resvered * 10) + (Copy_u8Number%10);
		Copy_u8Number /=10;

	}while (Copy_u8Number != 0);

	while (Local_u8DigitsCounter > 0)
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	88 23       	and	r24, r24
    2384:	b9 f6       	brne	.-82     	; 0x2334 <LCD_voidDispalyNumber+0xe4>
	{
		LCD_voidSendData (Resvered %10 + '0');
		Resvered /=10;
		Local_u8DigitsCounter --;
	}
}
    2386:	29 96       	adiw	r28, 0x09	; 9
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	08 95       	ret

000023a0 <LCD_voidGotoXandY>:


void LCD_voidGotoXandY (u8 Copy_u8Xpos , u8 Copy_u8Ypos)  
{                                                         
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <LCD_voidGotoXandY+0x6>
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_voidGotoXandY+0x8>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_voidGotoXandY+0xa>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	6e 83       	std	Y+6, r22	; 0x06
	u32 Local_u32Address =0 ;
    23b2:	19 82       	std	Y+1, r1	; 0x01
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1b 82       	std	Y+3, r1	; 0x03
    23b8:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32Address = Copy_u8Ypos + (0x40*Copy_u8Xpos);
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	00 24       	eor	r0, r0
    23c8:	96 95       	lsr	r25
    23ca:	87 95       	ror	r24
    23cc:	07 94       	ror	r0
    23ce:	96 95       	lsr	r25
    23d0:	87 95       	ror	r24
    23d2:	07 94       	ror	r0
    23d4:	98 2f       	mov	r25, r24
    23d6:	80 2d       	mov	r24, r0
    23d8:	82 0f       	add	r24, r18
    23da:	93 1f       	adc	r25, r19
    23dc:	aa 27       	eor	r26, r26
    23de:	97 fd       	sbrc	r25, 7
    23e0:	a0 95       	com	r26
    23e2:	ba 2f       	mov	r27, r26
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	ab 83       	std	Y+3, r26	; 0x03
    23ea:	bc 83       	std	Y+4, r27	; 0x04
	/*  this for data sheet Set DDRAM Address  */
	LCD_voidSendCommend(Local_u32Address + 128);
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	80 58       	subi	r24, 0x80	; 128
    23f0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_voidSendCommend>

}
    23f4:	26 96       	adiw	r28, 0x06	; 6
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_voidDisplayString>:
void LCD_voidDisplayString  (u8* Copy_ptrString)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <LCD_voidDisplayString+0x6>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	0a c0       	rjmp	.+20     	; 0x242a <LCD_voidDisplayString+0x24>

	while(*Copy_ptrString !='\0')
	{
		LCD_voidSendData(*Copy_ptrString);
    2416:	e9 81       	ldd	r30, Y+1	; 0x01
    2418:	fa 81       	ldd	r31, Y+2	; 0x02
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_voidSendData>
		Copy_ptrString++;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	01 96       	adiw	r24, 0x01	; 1
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_voidDisplayString  (u8* Copy_ptrString)
{

	while(*Copy_ptrString !='\0')
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	80 81       	ld	r24, Z
    2430:	88 23       	and	r24, r24
    2432:	89 f7       	brne	.-30     	; 0x2416 <LCD_voidDisplayString+0x10>
	{
		LCD_voidSendData(*Copy_ptrString);
		Copy_ptrString++;

	}
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <PWM_voidTimer0Init>:
#include "PWM_private.h"
#include "PWM_register.h"
#include "PWM_interface.h"

void PWM_voidTimer0Init(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    /* Set Compare Output Mode as a non inverting */
    #if COMPARE_OUT_MODE0 ==NORMAL
    CLR_BIT(TCCR0,4);
    CLR_BIT(TCCR0,5);
    #elif COMPARE_OUT_MODE0 ==NON_INVERTING
    CLR_BIT(TCCR0,4);
    2446:	a3 e5       	ldi	r26, 0x53	; 83
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e3 e5       	ldi	r30, 0x53	; 83
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8f 7e       	andi	r24, 0xEF	; 239
    2452:	8c 93       	st	X, r24
    SET_BIT(TCCR0,5);
    2454:	a3 e5       	ldi	r26, 0x53	; 83
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e3 e5       	ldi	r30, 0x53	; 83
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	80 62       	ori	r24, 0x20	; 32
    2460:	8c 93       	st	X, r24
    SET_BIT(TCCR0,6);
	#elif PWM_GenerationWaveForm0 == PWM_CTC
    SET_BIT(TCCR0,3);
    CLR_BIT(TCCR0,6);
	#elif PWM_GenerationWaveForm0 == PWM_FAST
    SET_BIT(TCCR0,3);
    2462:	a3 e5       	ldi	r26, 0x53	; 83
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e3 e5       	ldi	r30, 0x53	; 83
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	88 60       	ori	r24, 0x08	; 8
    246e:	8c 93       	st	X, r24
    SET_BIT(TCCR0,6);
    2470:	a3 e5       	ldi	r26, 0x53	; 83
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e3 e5       	ldi	r30, 0x53	; 83
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	80 64       	ori	r24, 0x40	; 64
    247c:	8c 93       	st	X, r24
    #if PRESCALLER_SELECT ==NO_PRESCALLER
    TCCR0&=PRESCALLER_MASK;
    TCCR0|=NO_PRESCALLER;

    #elif PRESCALLER_SELECT ==DIVIDE_BY_8
    TCCR0&=PRESCALLER_MASK;
    247e:	a3 e5       	ldi	r26, 0x53	; 83
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e3 e5       	ldi	r30, 0x53	; 83
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 7f       	andi	r24, 0xF8	; 248
    248a:	8c 93       	st	X, r24
    TCCR0|=DIVIDE_BY_8;
    248c:	a3 e5       	ldi	r26, 0x53	; 83
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e3 e5       	ldi	r30, 0x53	; 83
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	82 60       	ori	r24, 0x02	; 2
    2498:	8c 93       	st	X, r24
    #elif PRESCALLER_SELECT ==RISING_EDGE_EX_CLK
    TCCR0&=PRESCALLER_MASK;
    TCCR0|=RISING_EDGE_EX_CLK;

    #endif
}
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <PWM_voidTimer1Init>:


void PWM_voidTimer1Init(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    /* Set Compare Output Mode as a non inverting */
#if CHANNEL_SELECT==CHANNEL_A
    #if COMPARE_OUT_MODE ==NORMAL
    CLR_BIT(TCCR1A,6);
    24a8:	af e4       	ldi	r26, 0x4F	; 79
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ef e4       	ldi	r30, 0x4F	; 79
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8f 7b       	andi	r24, 0xBF	; 191
    24b4:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,7);
    24b6:	af e4       	ldi	r26, 0x4F	; 79
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	ef e4       	ldi	r30, 0x4F	; 79
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8f 77       	andi	r24, 0x7F	; 127
    24c2:	8c 93       	st	X, r24
#endif


    /* Wave Form Generation Mode */
    #if PWM_GenerationWaveForm == PWM_NORMAL
    CLR_BIT(TCCR1A,0);
    24c4:	af e4       	ldi	r26, 0x4F	; 79
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ef e4       	ldi	r30, 0x4F	; 79
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	8e 7f       	andi	r24, 0xFE	; 254
    24d0:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,1);
    24d2:	af e4       	ldi	r26, 0x4F	; 79
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e4       	ldi	r30, 0x4F	; 79
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	8d 7f       	andi	r24, 0xFD	; 253
    24de:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,3);
    24e0:	ae e4       	ldi	r26, 0x4E	; 78
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	ee e4       	ldi	r30, 0x4E	; 78
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	87 7f       	andi	r24, 0xF7	; 247
    24ec:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,4); 
    24ee:	ae e4       	ldi	r26, 0x4E	; 78
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ee e4       	ldi	r30, 0x4E	; 78
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8f 7e       	andi	r24, 0xEF	; 239
    24fa:	8c 93       	st	X, r24
    #if PRESCALLER_SELECT ==NO_PRESCALLER
    TCCR1B&=PRESCALLER_MASK;
    TCCR1B|=NO_PRESCALLER;

    #elif PRESCALLER_SELECT ==DIVIDE_BY_8
    TCCR1B&=PRESCALLER_MASK;
    24fc:	ae e4       	ldi	r26, 0x4E	; 78
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	ee e4       	ldi	r30, 0x4E	; 78
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	88 7f       	andi	r24, 0xF8	; 248
    2508:	8c 93       	st	X, r24
    TCCR1B|=DIVIDE_BY_8;
    250a:	ae e4       	ldi	r26, 0x4E	; 78
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	ee e4       	ldi	r30, 0x4E	; 78
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	82 60       	ori	r24, 0x02	; 2
    2516:	8c 93       	st	X, r24
    #elif PRESCALLER_SELECT ==RISING_EDGE_EX_CLK
    TCCR1B&=PRESCALLER_MASK;
    TCCR1B|=RISING_EDGE_EX_CLK;

    #endif    
}
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <PWM_voidTimer2Init>:

void PWM_voidTimer2Init(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    /* Set Compare Output Mode as a non inverting */
    #if COMPARE_OUT_MODE0 ==NORMAL
    CLR_BIT(TCCR2,4);
    CLR_BIT(TCCR2,5);
    #elif COMPARE_OUT_MODE0 ==NON_INVERTING
    CLR_BIT(TCCR2,4);
    2526:	a5 e4       	ldi	r26, 0x45	; 69
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e5 e4       	ldi	r30, 0x45	; 69
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 7e       	andi	r24, 0xEF	; 239
    2532:	8c 93       	st	X, r24
    SET_BIT(TCCR2,5);
    2534:	a5 e4       	ldi	r26, 0x45	; 69
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e4       	ldi	r30, 0x45	; 69
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 62       	ori	r24, 0x20	; 32
    2540:	8c 93       	st	X, r24
    SET_BIT(TCCR2,6);
	#elif PWM_GenerationWaveForm0 == PWM_CTC
    SET_BIT(TCCR2,3);
    CLR_BIT(TCCR2,6);
	#elif PWM_GenerationWaveForm0 == PWM_FAST
    SET_BIT(TCCR2,3);
    2542:	a5 e4       	ldi	r26, 0x45	; 69
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e5 e4       	ldi	r30, 0x45	; 69
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	88 60       	ori	r24, 0x08	; 8
    254e:	8c 93       	st	X, r24
    SET_BIT(TCCR2,6);
    2550:	a5 e4       	ldi	r26, 0x45	; 69
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e5 e4       	ldi	r30, 0x45	; 69
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	80 64       	ori	r24, 0x40	; 64
    255c:	8c 93       	st	X, r24
    #if PRESCALLER_SELECT ==NO_PRESCALLER
    TCCR0&=PRESCALLER_MASK;
    TCCR0|=NO_PRESCALLER;

    #elif PRESCALLER_SELECT ==DIVIDE_BY_8
    TCCR0&=PRESCALLER_MASK;
    255e:	a3 e5       	ldi	r26, 0x53	; 83
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e3 e5       	ldi	r30, 0x53	; 83
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	88 7f       	andi	r24, 0xF8	; 248
    256a:	8c 93       	st	X, r24
    TCCR0|=DIVIDE_BY_8;
    256c:	a3 e5       	ldi	r26, 0x53	; 83
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e3 e5       	ldi	r30, 0x53	; 83
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	82 60       	ori	r24, 0x02	; 2
    2578:	8c 93       	st	X, r24
    #elif PRESCALLER_SELECT ==DIVIDE_BY_1024_T2
    TCCR0&=PRESCALLER_MASK;
    TCCR0|=DIVIDE_BY_1024;

    #endif
}
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <PWM_voidSetICR1>:



void PWM_voidSetICR1(u16 Copy_u16Top)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <PWM_voidSetICR1+0x6>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Top;
    258e:	e6 e4       	ldi	r30, 0x46	; 70
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <PWM_voidSetOCR>:

void PWM_voidSetOCR (u16 Copy_u16CompareValue)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <PWM_voidSetOCR+0x6>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    #if CHANNEL_SELECT==CHANNEL_A
    OCR1A=Copy_u16CompareValue;
    25b2:	ea e4       	ldi	r30, 0x4A	; 74
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    #elif CHANNEL_SELECT==CHANNEL_B
    OCR1B=Copy_u16CompareValue;
    #endif

}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <PWM_voidSetOCR0>:

void PWM_voidSetOCR0 (u8 Copy_u16CompareValue)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	0f 92       	push	r0
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
    
    OCR0=Copy_u16CompareValue;
    25d4:	ec e5       	ldi	r30, 0x5C	; 92
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	80 83       	st	Z, r24
}
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <PWM_voidSetOCR2>:

void PWM_voidSetOCR2 (u8 Copy_u16CompareValue)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	89 83       	std	Y+1, r24	; 0x01
    
    OCR2=Copy_u16CompareValue;
    25f0:	e3 e4       	ldi	r30, 0x43	; 67
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	80 83       	st	Z, r24
}
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <servo>:


void servo (u8 Copy_u8Degree)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8Degree==0)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	88 23       	and	r24, r24
    2610:	39 f4       	brne	.+14     	; 0x2620 <servo+0x20>
    {
        OCR1A=1000;
    2612:	ea e4       	ldi	r30, 0x4A	; 74
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	88 ee       	ldi	r24, 0xE8	; 232
    2618:	93 e0       	ldi	r25, 0x03	; 3
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	13 c0       	rjmp	.+38     	; 0x2646 <servo+0x46>
    }
    else if (Copy_u8Degree==90)
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8a 35       	cpi	r24, 0x5A	; 90
    2624:	39 f4       	brne	.+14     	; 0x2634 <servo+0x34>
    {
        OCR1A=1500;
    2626:	ea e4       	ldi	r30, 0x4A	; 74
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	8c ed       	ldi	r24, 0xDC	; 220
    262c:	95 e0       	ldi	r25, 0x05	; 5
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	09 c0       	rjmp	.+18     	; 0x2646 <servo+0x46>
    }
    else if (Copy_u8Degree==180)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	84 3b       	cpi	r24, 0xB4	; 180
    2638:	31 f4       	brne	.+12     	; 0x2646 <servo+0x46>
    {
        OCR1A=2000;
    263a:	ea e4       	ldi	r30, 0x4A	; 74
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 ed       	ldi	r24, 0xD0	; 208
    2640:	97 e0       	ldi	r25, 0x07	; 7
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    }
}
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <__vector_11>:
static void (*Callback_Gpt_TIM1_COMPB) (void) = NULL_PTR;
static void (*Callback_Gpt_TIM2_OVF) (void) = NULL_PTR;
static void (*Callback_Gpt_TIM2_COMP) (void) = NULL_PTR;

ISR(VECTOR_TIM0_OVF)
{
    264e:	1f 92       	push	r1
    2650:	0f 92       	push	r0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	0f 92       	push	r0
    2656:	11 24       	eor	r1, r1
    2658:	2f 93       	push	r18
    265a:	3f 93       	push	r19
    265c:	4f 93       	push	r20
    265e:	5f 93       	push	r21
    2660:	6f 93       	push	r22
    2662:	7f 93       	push	r23
    2664:	8f 93       	push	r24
    2666:	9f 93       	push	r25
    2668:	af 93       	push	r26
    266a:	bf 93       	push	r27
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM0_OVF)
    2678:	80 91 7a 00 	lds	r24, 0x007A
    267c:	90 91 7b 00 	lds	r25, 0x007B
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	29 f0       	breq	.+10     	; 0x268e <__vector_11+0x40>
    {
        Callback_Gpt_TIM0_OVF();
    2684:	e0 91 7a 00 	lds	r30, 0x007A
    2688:	f0 91 7b 00 	lds	r31, 0x007B
    268c:	09 95       	icall
    }
}
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	ff 91       	pop	r31
    2694:	ef 91       	pop	r30
    2696:	bf 91       	pop	r27
    2698:	af 91       	pop	r26
    269a:	9f 91       	pop	r25
    269c:	8f 91       	pop	r24
    269e:	7f 91       	pop	r23
    26a0:	6f 91       	pop	r22
    26a2:	5f 91       	pop	r21
    26a4:	4f 91       	pop	r20
    26a6:	3f 91       	pop	r19
    26a8:	2f 91       	pop	r18
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	0f 90       	pop	r0
    26b0:	1f 90       	pop	r1
    26b2:	18 95       	reti

000026b4 <__vector_10>:

ISR(VECTOR_TIM0_COMP)
{
    26b4:	1f 92       	push	r1
    26b6:	0f 92       	push	r0
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	0f 92       	push	r0
    26bc:	11 24       	eor	r1, r1
    26be:	2f 93       	push	r18
    26c0:	3f 93       	push	r19
    26c2:	4f 93       	push	r20
    26c4:	5f 93       	push	r21
    26c6:	6f 93       	push	r22
    26c8:	7f 93       	push	r23
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM0_COMP)
    26de:	80 91 7c 00 	lds	r24, 0x007C
    26e2:	90 91 7d 00 	lds	r25, 0x007D
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	29 f0       	breq	.+10     	; 0x26f4 <__vector_10+0x40>
    {
        Callback_Gpt_TIM0_COMP();
    26ea:	e0 91 7c 00 	lds	r30, 0x007C
    26ee:	f0 91 7d 00 	lds	r31, 0x007D
    26f2:	09 95       	icall
    }
}
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	ff 91       	pop	r31
    26fa:	ef 91       	pop	r30
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	9f 91       	pop	r25
    2702:	8f 91       	pop	r24
    2704:	7f 91       	pop	r23
    2706:	6f 91       	pop	r22
    2708:	5f 91       	pop	r21
    270a:	4f 91       	pop	r20
    270c:	3f 91       	pop	r19
    270e:	2f 91       	pop	r18
    2710:	0f 90       	pop	r0
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	0f 90       	pop	r0
    2716:	1f 90       	pop	r1
    2718:	18 95       	reti

0000271a <__vector_9>:

ISR(VECTOR_TIM1_OVF)
{
    271a:	1f 92       	push	r1
    271c:	0f 92       	push	r0
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	0f 92       	push	r0
    2722:	11 24       	eor	r1, r1
    2724:	2f 93       	push	r18
    2726:	3f 93       	push	r19
    2728:	4f 93       	push	r20
    272a:	5f 93       	push	r21
    272c:	6f 93       	push	r22
    272e:	7f 93       	push	r23
    2730:	8f 93       	push	r24
    2732:	9f 93       	push	r25
    2734:	af 93       	push	r26
    2736:	bf 93       	push	r27
    2738:	ef 93       	push	r30
    273a:	ff 93       	push	r31
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_OVF)
    2744:	80 91 7e 00 	lds	r24, 0x007E
    2748:	90 91 7f 00 	lds	r25, 0x007F
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	29 f0       	breq	.+10     	; 0x275a <__vector_9+0x40>
    {
        Callback_Gpt_TIM1_OVF();
    2750:	e0 91 7e 00 	lds	r30, 0x007E
    2754:	f0 91 7f 00 	lds	r31, 0x007F
    2758:	09 95       	icall
    }
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	ff 91       	pop	r31
    2760:	ef 91       	pop	r30
    2762:	bf 91       	pop	r27
    2764:	af 91       	pop	r26
    2766:	9f 91       	pop	r25
    2768:	8f 91       	pop	r24
    276a:	7f 91       	pop	r23
    276c:	6f 91       	pop	r22
    276e:	5f 91       	pop	r21
    2770:	4f 91       	pop	r20
    2772:	3f 91       	pop	r19
    2774:	2f 91       	pop	r18
    2776:	0f 90       	pop	r0
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	0f 90       	pop	r0
    277c:	1f 90       	pop	r1
    277e:	18 95       	reti

00002780 <__vector_7>:

ISR(VECTOR_TIM1_COMPA)
{
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_COMPA)
    27aa:	80 91 80 00 	lds	r24, 0x0080
    27ae:	90 91 81 00 	lds	r25, 0x0081
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	29 f0       	breq	.+10     	; 0x27c0 <__vector_7+0x40>
    {
        Callback_Gpt_TIM1_COMPA();
    27b6:	e0 91 80 00 	lds	r30, 0x0080
    27ba:	f0 91 81 00 	lds	r31, 0x0081
    27be:	09 95       	icall
    }
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	ff 91       	pop	r31
    27c6:	ef 91       	pop	r30
    27c8:	bf 91       	pop	r27
    27ca:	af 91       	pop	r26
    27cc:	9f 91       	pop	r25
    27ce:	8f 91       	pop	r24
    27d0:	7f 91       	pop	r23
    27d2:	6f 91       	pop	r22
    27d4:	5f 91       	pop	r21
    27d6:	4f 91       	pop	r20
    27d8:	3f 91       	pop	r19
    27da:	2f 91       	pop	r18
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <__vector_8>:

ISR(VECTOR_TIM1_COMPB)
{
    27e6:	1f 92       	push	r1
    27e8:	0f 92       	push	r0
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	0f 92       	push	r0
    27ee:	11 24       	eor	r1, r1
    27f0:	2f 93       	push	r18
    27f2:	3f 93       	push	r19
    27f4:	4f 93       	push	r20
    27f6:	5f 93       	push	r21
    27f8:	6f 93       	push	r22
    27fa:	7f 93       	push	r23
    27fc:	8f 93       	push	r24
    27fe:	9f 93       	push	r25
    2800:	af 93       	push	r26
    2802:	bf 93       	push	r27
    2804:	ef 93       	push	r30
    2806:	ff 93       	push	r31
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM1_COMPB)
    2810:	80 91 82 00 	lds	r24, 0x0082
    2814:	90 91 83 00 	lds	r25, 0x0083
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	29 f0       	breq	.+10     	; 0x2826 <__vector_8+0x40>
    {
        Callback_Gpt_TIM1_COMPB();
    281c:	e0 91 82 00 	lds	r30, 0x0082
    2820:	f0 91 83 00 	lds	r31, 0x0083
    2824:	09 95       	icall
    }
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	ff 91       	pop	r31
    282c:	ef 91       	pop	r30
    282e:	bf 91       	pop	r27
    2830:	af 91       	pop	r26
    2832:	9f 91       	pop	r25
    2834:	8f 91       	pop	r24
    2836:	7f 91       	pop	r23
    2838:	6f 91       	pop	r22
    283a:	5f 91       	pop	r21
    283c:	4f 91       	pop	r20
    283e:	3f 91       	pop	r19
    2840:	2f 91       	pop	r18
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <__vector_5>:

ISR(VECTOR_TIM2_OVF)
{
    284c:	1f 92       	push	r1
    284e:	0f 92       	push	r0
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	0f 92       	push	r0
    2854:	11 24       	eor	r1, r1
    2856:	2f 93       	push	r18
    2858:	3f 93       	push	r19
    285a:	4f 93       	push	r20
    285c:	5f 93       	push	r21
    285e:	6f 93       	push	r22
    2860:	7f 93       	push	r23
    2862:	8f 93       	push	r24
    2864:	9f 93       	push	r25
    2866:	af 93       	push	r26
    2868:	bf 93       	push	r27
    286a:	ef 93       	push	r30
    286c:	ff 93       	push	r31
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM2_OVF)
    2876:	80 91 84 00 	lds	r24, 0x0084
    287a:	90 91 85 00 	lds	r25, 0x0085
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	29 f0       	breq	.+10     	; 0x288c <__vector_5+0x40>
    {
        Callback_Gpt_TIM2_OVF();
    2882:	e0 91 84 00 	lds	r30, 0x0084
    2886:	f0 91 85 00 	lds	r31, 0x0085
    288a:	09 95       	icall
    }
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	ff 91       	pop	r31
    2892:	ef 91       	pop	r30
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	7f 91       	pop	r23
    289e:	6f 91       	pop	r22
    28a0:	5f 91       	pop	r21
    28a2:	4f 91       	pop	r20
    28a4:	3f 91       	pop	r19
    28a6:	2f 91       	pop	r18
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	0f 90       	pop	r0
    28ae:	1f 90       	pop	r1
    28b0:	18 95       	reti

000028b2 <__vector_4>:

ISR(VECTOR_TIM2_COMP)
{
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	0f 92       	push	r0
    28ba:	11 24       	eor	r1, r1
    28bc:	2f 93       	push	r18
    28be:	3f 93       	push	r19
    28c0:	4f 93       	push	r20
    28c2:	5f 93       	push	r21
    28c4:	6f 93       	push	r22
    28c6:	7f 93       	push	r23
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	af 93       	push	r26
    28ce:	bf 93       	push	r27
    28d0:	ef 93       	push	r30
    28d2:	ff 93       	push	r31
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    if (NULL_PTR != Callback_Gpt_TIM2_COMP)
    28dc:	80 91 86 00 	lds	r24, 0x0086
    28e0:	90 91 87 00 	lds	r25, 0x0087
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	29 f0       	breq	.+10     	; 0x28f2 <__vector_4+0x40>
    {
        Callback_Gpt_TIM2_COMP();
    28e8:	e0 91 86 00 	lds	r30, 0x0086
    28ec:	f0 91 87 00 	lds	r31, 0x0087
    28f0:	09 95       	icall
    }
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	ff 91       	pop	r31
    28f8:	ef 91       	pop	r30
    28fa:	bf 91       	pop	r27
    28fc:	af 91       	pop	r26
    28fe:	9f 91       	pop	r25
    2900:	8f 91       	pop	r24
    2902:	7f 91       	pop	r23
    2904:	6f 91       	pop	r22
    2906:	5f 91       	pop	r21
    2908:	4f 91       	pop	r20
    290a:	3f 91       	pop	r19
    290c:	2f 91       	pop	r18
    290e:	0f 90       	pop	r0
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <GPT_voidInit>:


void GPT_voidInit(Gpt_ConfigurationType* config )
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	2a 97       	sbiw	r28, 0x0a	; 10
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
	/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer0 Init >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
	if (config->Timer0_Mode !=GPT_MODE_OFF)
    2930:	e9 81       	ldd	r30, Y+1	; 0x01
    2932:	fa 81       	ldd	r31, Y+2	; 0x02
    2934:	80 81       	ld	r24, Z
    2936:	88 23       	and	r24, r24
    2938:	09 f4       	brne	.+2      	; 0x293c <GPT_voidInit+0x24>
    293a:	8a c0       	rjmp	.+276    	; 0x2a50 <GPT_voidInit+0x138>
	{
		if (config->Timer0_Mode == GPT_MODE_NORMAL)
    293c:	e9 81       	ldd	r30, Y+1	; 0x01
    293e:	fa 81       	ldd	r31, Y+2	; 0x02
    2940:	80 81       	ld	r24, Z
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	79 f4       	brne	.+30     	; 0x2964 <GPT_voidInit+0x4c>
		{
			CLR_BIT(TIMER_TCCR0,3);
    2946:	a3 e5       	ldi	r26, 0x53	; 83
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e3 e5       	ldi	r30, 0x53	; 83
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	87 7f       	andi	r24, 0xF7	; 247
    2952:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,6);
    2954:	a3 e5       	ldi	r26, 0x53	; 83
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e3 e5       	ldi	r30, 0x53	; 83
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8f 7b       	andi	r24, 0xBF	; 191
    2960:	8c 93       	st	X, r24
    2962:	13 c0       	rjmp	.+38     	; 0x298a <GPT_voidInit+0x72>
		}
		else if (config->Timer0_Mode == GPT_MODE_CTC)
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	80 81       	ld	r24, Z
    296a:	82 30       	cpi	r24, 0x02	; 2
    296c:	71 f4       	brne	.+28     	; 0x298a <GPT_voidInit+0x72>
		{
			CLR_BIT(TIMER_TCCR0,6);
    296e:	a3 e5       	ldi	r26, 0x53	; 83
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e3 e5       	ldi	r30, 0x53	; 83
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 7b       	andi	r24, 0xBF	; 191
    297a:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,3);
    297c:	a3 e5       	ldi	r26, 0x53	; 83
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e3 e5       	ldi	r30, 0x53	; 83
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	88 60       	ori	r24, 0x08	; 8
    2988:	8c 93       	st	X, r24
		}
		else
		{
			//do nothing
		}
		switch (config->Timer0_Output)
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	3a 87       	std	Y+10, r19	; 0x0a
    2996:	29 87       	std	Y+9, r18	; 0x09
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	91 05       	cpc	r25, r1
    29a0:	21 f1       	breq	.+72     	; 0x29ea <GPT_voidInit+0xd2>
    29a2:	29 85       	ldd	r18, Y+9	; 0x09
    29a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    29a6:	22 30       	cpi	r18, 0x02	; 2
    29a8:	31 05       	cpc	r19, r1
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <GPT_voidInit+0x9e>
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	61 f0       	breq	.+24     	; 0x29cc <GPT_voidInit+0xb4>
    29b4:	46 c0       	rjmp	.+140    	; 0x2a42 <GPT_voidInit+0x12a>
    29b6:	29 85       	ldd	r18, Y+9	; 0x09
    29b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    29ba:	22 30       	cpi	r18, 0x02	; 2
    29bc:	31 05       	cpc	r19, r1
    29be:	21 f1       	breq	.+72     	; 0x2a08 <GPT_voidInit+0xf0>
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c4:	83 30       	cpi	r24, 0x03	; 3
    29c6:	91 05       	cpc	r25, r1
    29c8:	71 f1       	breq	.+92     	; 0x2a26 <GPT_voidInit+0x10e>
    29ca:	3b c0       	rjmp	.+118    	; 0x2a42 <GPT_voidInit+0x12a>
		{
		case GPT_OUT_DISCONCTED:
			CLR_BIT(TIMER_TCCR0,4);
    29cc:	a3 e5       	ldi	r26, 0x53	; 83
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e3 e5       	ldi	r30, 0x53	; 83
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8f 7e       	andi	r24, 0xEF	; 239
    29d8:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,5);
    29da:	a3 e5       	ldi	r26, 0x53	; 83
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e3 e5       	ldi	r30, 0x53	; 83
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7d       	andi	r24, 0xDF	; 223
    29e6:	8c 93       	st	X, r24
    29e8:	2c c0       	rjmp	.+88     	; 0x2a42 <GPT_voidInit+0x12a>
			break;

		case GPT_OUT_TOGGLE:
			SET_BIT(TIMER_TCCR0,4);
    29ea:	a3 e5       	ldi	r26, 0x53	; 83
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e3 e5       	ldi	r30, 0x53	; 83
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	80 61       	ori	r24, 0x10	; 16
    29f6:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,5);
    29f8:	a3 e5       	ldi	r26, 0x53	; 83
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e3 e5       	ldi	r30, 0x53	; 83
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	8f 7d       	andi	r24, 0xDF	; 223
    2a04:	8c 93       	st	X, r24
    2a06:	1d c0       	rjmp	.+58     	; 0x2a42 <GPT_voidInit+0x12a>
			break;

		case GPT_OUT_CLR:
			CLR_BIT(TIMER_TCCR0,4);
    2a08:	a3 e5       	ldi	r26, 0x53	; 83
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e3 e5       	ldi	r30, 0x53	; 83
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8f 7e       	andi	r24, 0xEF	; 239
    2a14:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,5);
    2a16:	a3 e5       	ldi	r26, 0x53	; 83
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e3 e5       	ldi	r30, 0x53	; 83
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	80 62       	ori	r24, 0x20	; 32
    2a22:	8c 93       	st	X, r24
    2a24:	0e c0       	rjmp	.+28     	; 0x2a42 <GPT_voidInit+0x12a>
			break;

		case GPT_OUT_SET:
			SET_BIT(TIMER_TCCR0,4);
    2a26:	a3 e5       	ldi	r26, 0x53	; 83
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e3 e5       	ldi	r30, 0x53	; 83
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 61       	ori	r24, 0x10	; 16
    2a32:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,5);
    2a34:	a3 e5       	ldi	r26, 0x53	; 83
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e3 e5       	ldi	r30, 0x53	; 83
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 62       	ori	r24, 0x20	; 32
    2a40:	8c 93       	st	X, r24
			break;

		default:  break;
		}

		GPT_voidSetClockSource(GPT_CHANNEL_TIMER0,config->Timer0_Clk);
    2a42:	e9 81       	ldd	r30, Y+1	; 0x01
    2a44:	fa 81       	ldd	r31, Y+2	; 0x02
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <GPT_voidSetClockSource>
	}
	/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer1 Init >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
	if (config->Timer1_Mode !=GPT_MODE_OFF)
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	83 81       	ldd	r24, Z+3	; 0x03
    2a56:	88 23       	and	r24, r24
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <GPT_voidInit+0x144>
    2a5a:	24 c1       	rjmp	.+584    	; 0x2ca4 <GPT_voidInit+0x38c>
	{
		if (config->Timer1_Mode == GPT_MODE_NORMAL)
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	83 81       	ldd	r24, Z+3	; 0x03
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	e9 f4       	brne	.+58     	; 0x2aa0 <GPT_voidInit+0x188>
		{
			CLR_BIT(TIMER_TCCR1A,0);
    2a66:	af e2       	ldi	r26, 0x2F	; 47
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	ef e2       	ldi	r30, 0x2F	; 47
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	8e 7f       	andi	r24, 0xFE	; 254
    2a72:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,1);
    2a74:	af e2       	ldi	r26, 0x2F	; 47
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	ef e2       	ldi	r30, 0x2F	; 47
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8d 7f       	andi	r24, 0xFD	; 253
    2a80:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1B,3);
    2a82:	ae e4       	ldi	r26, 0x4E	; 78
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ee e4       	ldi	r30, 0x4E	; 78
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	87 7f       	andi	r24, 0xF7	; 247
    2a8e:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1B,4);
    2a90:	ae e4       	ldi	r26, 0x4E	; 78
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8f 7e       	andi	r24, 0xEF	; 239
    2a9c:	8c 93       	st	X, r24
    2a9e:	43 c0       	rjmp	.+134    	; 0x2b26 <GPT_voidInit+0x20e>

		}
		else if (config->Timer0_Mode == GPT_MODE_CTC)
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	80 81       	ld	r24, Z
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	e9 f4       	brne	.+58     	; 0x2ae4 <GPT_voidInit+0x1cc>
		{
			CLR_BIT(TIMER_TCCR1A,0);
    2aaa:	af e2       	ldi	r26, 0x2F	; 47
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	ef e2       	ldi	r30, 0x2F	; 47
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8e 7f       	andi	r24, 0xFE	; 254
    2ab6:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,1);
    2ab8:	af e2       	ldi	r26, 0x2F	; 47
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	ef e2       	ldi	r30, 0x2F	; 47
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8d 7f       	andi	r24, 0xFD	; 253
    2ac4:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1B,3);
    2ac6:	ae e4       	ldi	r26, 0x4E	; 78
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	ee e4       	ldi	r30, 0x4E	; 78
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 60       	ori	r24, 0x08	; 8
    2ad2:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1B,4);
    2ad4:	ae e4       	ldi	r26, 0x4E	; 78
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	ee e4       	ldi	r30, 0x4E	; 78
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	8f 7e       	andi	r24, 0xEF	; 239
    2ae0:	8c 93       	st	X, r24
    2ae2:	21 c0       	rjmp	.+66     	; 0x2b26 <GPT_voidInit+0x20e>
		}
		else if (config->Timer0_Mode == GPT_MODE_CTC_ICR1)
    2ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae8:	80 81       	ld	r24, Z
    2aea:	83 30       	cpi	r24, 0x03	; 3
    2aec:	e1 f4       	brne	.+56     	; 0x2b26 <GPT_voidInit+0x20e>
		{
			CLR_BIT(TIMER_TCCR1A,0);
    2aee:	af e2       	ldi	r26, 0x2F	; 47
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	ef e2       	ldi	r30, 0x2F	; 47
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8e 7f       	andi	r24, 0xFE	; 254
    2afa:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1A,1);
    2afc:	af e2       	ldi	r26, 0x2F	; 47
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	ef e2       	ldi	r30, 0x2F	; 47
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	82 60       	ori	r24, 0x02	; 2
    2b08:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1B,3);
    2b0a:	ae e4       	ldi	r26, 0x4E	; 78
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	ee e4       	ldi	r30, 0x4E	; 78
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	87 7f       	andi	r24, 0xF7	; 247
    2b16:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1B,4);
    2b18:	ae e4       	ldi	r26, 0x4E	; 78
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ee e4       	ldi	r30, 0x4E	; 78
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 61       	ori	r24, 0x10	; 16
    2b24:	8c 93       	st	X, r24
		}
		else
		{
			//do nothing
		}
		switch (config->Timer1A_Output)
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	85 81       	ldd	r24, Z+5	; 0x05
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	38 87       	std	Y+8, r19	; 0x08
    2b32:	2f 83       	std	Y+7, r18	; 0x07
    2b34:	8f 81       	ldd	r24, Y+7	; 0x07
    2b36:	98 85       	ldd	r25, Y+8	; 0x08
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	21 f1       	breq	.+72     	; 0x2b86 <GPT_voidInit+0x26e>
    2b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b40:	38 85       	ldd	r19, Y+8	; 0x08
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <GPT_voidInit+0x23a>
    2b48:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4a:	98 85       	ldd	r25, Y+8	; 0x08
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	61 f0       	breq	.+24     	; 0x2b68 <GPT_voidInit+0x250>
    2b50:	46 c0       	rjmp	.+140    	; 0x2bde <GPT_voidInit+0x2c6>
    2b52:	2f 81       	ldd	r18, Y+7	; 0x07
    2b54:	38 85       	ldd	r19, Y+8	; 0x08
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	21 f1       	breq	.+72     	; 0x2ba4 <GPT_voidInit+0x28c>
    2b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5e:	98 85       	ldd	r25, Y+8	; 0x08
    2b60:	83 30       	cpi	r24, 0x03	; 3
    2b62:	91 05       	cpc	r25, r1
    2b64:	71 f1       	breq	.+92     	; 0x2bc2 <GPT_voidInit+0x2aa>
    2b66:	3b c0       	rjmp	.+118    	; 0x2bde <GPT_voidInit+0x2c6>
		{
		case GPT_OUT_DISCONCTED:
			CLR_BIT(TIMER_TCCR1A,6);
    2b68:	af e2       	ldi	r26, 0x2F	; 47
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	ef e2       	ldi	r30, 0x2F	; 47
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	8f 7b       	andi	r24, 0xBF	; 191
    2b74:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,7);
    2b76:	af e2       	ldi	r26, 0x2F	; 47
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	ef e2       	ldi	r30, 0x2F	; 47
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 77       	andi	r24, 0x7F	; 127
    2b82:	8c 93       	st	X, r24
    2b84:	2c c0       	rjmp	.+88     	; 0x2bde <GPT_voidInit+0x2c6>
			break;

		case GPT_OUT_TOGGLE:
			SET_BIT(TIMER_TCCR1A,6);
    2b86:	af e2       	ldi	r26, 0x2F	; 47
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	ef e2       	ldi	r30, 0x2F	; 47
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	80 64       	ori	r24, 0x40	; 64
    2b92:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,7);
    2b94:	af e2       	ldi	r26, 0x2F	; 47
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	ef e2       	ldi	r30, 0x2F	; 47
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 77       	andi	r24, 0x7F	; 127
    2ba0:	8c 93       	st	X, r24
    2ba2:	1d c0       	rjmp	.+58     	; 0x2bde <GPT_voidInit+0x2c6>
			break;

		case GPT_OUT_CLR:
			CLR_BIT(TIMER_TCCR1A,6);
    2ba4:	af e2       	ldi	r26, 0x2F	; 47
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	ef e2       	ldi	r30, 0x2F	; 47
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	8f 7b       	andi	r24, 0xBF	; 191
    2bb0:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1A,7);
    2bb2:	af e2       	ldi	r26, 0x2F	; 47
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	ef e2       	ldi	r30, 0x2F	; 47
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 68       	ori	r24, 0x80	; 128
    2bbe:	8c 93       	st	X, r24
    2bc0:	0e c0       	rjmp	.+28     	; 0x2bde <GPT_voidInit+0x2c6>
			break;

		case GPT_OUT_SET:
			SET_BIT(TIMER_TCCR1A,6);
    2bc2:	af e2       	ldi	r26, 0x2F	; 47
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	ef e2       	ldi	r30, 0x2F	; 47
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 64       	ori	r24, 0x40	; 64
    2bce:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1A,7);
    2bd0:	af e2       	ldi	r26, 0x2F	; 47
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ef e2       	ldi	r30, 0x2F	; 47
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 68       	ori	r24, 0x80	; 128
    2bdc:	8c 93       	st	X, r24
			break;

		default:  break;
		}

		switch (config->Timer1B_Output)
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	86 81       	ldd	r24, Z+6	; 0x06
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	3e 83       	std	Y+6, r19	; 0x06
    2bea:	2d 83       	std	Y+5, r18	; 0x05
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	21 f1       	breq	.+72     	; 0x2c3e <GPT_voidInit+0x326>
    2bf6:	2d 81       	ldd	r18, Y+5	; 0x05
    2bf8:	3e 81       	ldd	r19, Y+6	; 0x06
    2bfa:	22 30       	cpi	r18, 0x02	; 2
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	2c f4       	brge	.+10     	; 0x2c0a <GPT_voidInit+0x2f2>
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	61 f0       	breq	.+24     	; 0x2c20 <GPT_voidInit+0x308>
    2c08:	46 c0       	rjmp	.+140    	; 0x2c96 <GPT_voidInit+0x37e>
    2c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c0e:	22 30       	cpi	r18, 0x02	; 2
    2c10:	31 05       	cpc	r19, r1
    2c12:	21 f1       	breq	.+72     	; 0x2c5c <GPT_voidInit+0x344>
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	83 30       	cpi	r24, 0x03	; 3
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	71 f1       	breq	.+92     	; 0x2c7a <GPT_voidInit+0x362>
    2c1e:	3b c0       	rjmp	.+118    	; 0x2c96 <GPT_voidInit+0x37e>
		{
		case GPT_OUT_DISCONCTED:
			CLR_BIT(TIMER_TCCR1A,4);
    2c20:	af e2       	ldi	r26, 0x2F	; 47
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ef e2       	ldi	r30, 0x2F	; 47
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	8f 7e       	andi	r24, 0xEF	; 239
    2c2c:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,5);
    2c2e:	af e2       	ldi	r26, 0x2F	; 47
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ef e2       	ldi	r30, 0x2F	; 47
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	8f 7d       	andi	r24, 0xDF	; 223
    2c3a:	8c 93       	st	X, r24
    2c3c:	2c c0       	rjmp	.+88     	; 0x2c96 <GPT_voidInit+0x37e>
			break;

		case GPT_OUT_TOGGLE:
			SET_BIT(TIMER_TCCR1A,4);
    2c3e:	af e2       	ldi	r26, 0x2F	; 47
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	ef e2       	ldi	r30, 0x2F	; 47
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	80 61       	ori	r24, 0x10	; 16
    2c4a:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR1A,5);
    2c4c:	af e2       	ldi	r26, 0x2F	; 47
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ef e2       	ldi	r30, 0x2F	; 47
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	8f 7d       	andi	r24, 0xDF	; 223
    2c58:	8c 93       	st	X, r24
    2c5a:	1d c0       	rjmp	.+58     	; 0x2c96 <GPT_voidInit+0x37e>
			break;

		case GPT_OUT_CLR:
			CLR_BIT(TIMER_TCCR1A,4);
    2c5c:	af e2       	ldi	r26, 0x2F	; 47
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	ef e2       	ldi	r30, 0x2F	; 47
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 7e       	andi	r24, 0xEF	; 239
    2c68:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1A,5);
    2c6a:	af e2       	ldi	r26, 0x2F	; 47
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	ef e2       	ldi	r30, 0x2F	; 47
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	80 62       	ori	r24, 0x20	; 32
    2c76:	8c 93       	st	X, r24
    2c78:	0e c0       	rjmp	.+28     	; 0x2c96 <GPT_voidInit+0x37e>
			break;

		case GPT_OUT_SET:
			SET_BIT(TIMER_TCCR1A,4);
    2c7a:	af e2       	ldi	r26, 0x2F	; 47
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	ef e2       	ldi	r30, 0x2F	; 47
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	80 61       	ori	r24, 0x10	; 16
    2c86:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR1A,5);
    2c88:	af e2       	ldi	r26, 0x2F	; 47
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ef e2       	ldi	r30, 0x2F	; 47
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 62       	ori	r24, 0x20	; 32
    2c94:	8c 93       	st	X, r24
			break;

		default:  break;
		}

		GPT_voidSetClockSource(GPT_CHANNEL_TIMER1,config->Timer1_Clk);
    2c96:	e9 81       	ldd	r30, Y+1	; 0x01
    2c98:	fa 81       	ldd	r31, Y+2	; 0x02
    2c9a:	94 81       	ldd	r25, Z+4	; 0x04
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	69 2f       	mov	r22, r25
    2ca0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <GPT_voidSetClockSource>
	}
	/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer2 Init >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
	if (config->Timer2_Mode !=GPT_MODE_OFF)
    2ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca8:	87 81       	ldd	r24, Z+7	; 0x07
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <GPT_voidInit+0x398>
    2cae:	8a c0       	rjmp	.+276    	; 0x2dc4 <GPT_voidInit+0x4ac>
	{
		if (config->Timer2_Mode == GPT_MODE_NORMAL)
    2cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb4:	87 81       	ldd	r24, Z+7	; 0x07
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	79 f4       	brne	.+30     	; 0x2cd8 <GPT_voidInit+0x3c0>
		{
			CLR_BIT(TIMER_TCCR2,3);
    2cba:	a5 e4       	ldi	r26, 0x45	; 69
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e5 e4       	ldi	r30, 0x45	; 69
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	87 7f       	andi	r24, 0xF7	; 247
    2cc6:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR2,6);
    2cc8:	a5 e4       	ldi	r26, 0x45	; 69
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e5 e4       	ldi	r30, 0x45	; 69
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 7b       	andi	r24, 0xBF	; 191
    2cd4:	8c 93       	st	X, r24
    2cd6:	13 c0       	rjmp	.+38     	; 0x2cfe <GPT_voidInit+0x3e6>
		}
		else if (config->Timer0_Mode == GPT_MODE_CTC)
    2cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cda:	fa 81       	ldd	r31, Y+2	; 0x02
    2cdc:	80 81       	ld	r24, Z
    2cde:	82 30       	cpi	r24, 0x02	; 2
    2ce0:	71 f4       	brne	.+28     	; 0x2cfe <GPT_voidInit+0x3e6>
		{
			CLR_BIT(TIMER_TCCR2,6);
    2ce2:	a5 e4       	ldi	r26, 0x45	; 69
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e5 e4       	ldi	r30, 0x45	; 69
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8f 7b       	andi	r24, 0xBF	; 191
    2cee:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR2,3);
    2cf0:	a5 e4       	ldi	r26, 0x45	; 69
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e5 e4       	ldi	r30, 0x45	; 69
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 60       	ori	r24, 0x08	; 8
    2cfc:	8c 93       	st	X, r24
		else
		{
			//do nothing
		}

		switch (config->Timer2_Output)
    2cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2d00:	fa 81       	ldd	r31, Y+2	; 0x02
    2d02:	81 85       	ldd	r24, Z+9	; 0x09
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	3c 83       	std	Y+4, r19	; 0x04
    2d0a:	2b 83       	std	Y+3, r18	; 0x03
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	91 05       	cpc	r25, r1
    2d14:	21 f1       	breq	.+72     	; 0x2d5e <GPT_voidInit+0x446>
    2d16:	2b 81       	ldd	r18, Y+3	; 0x03
    2d18:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1a:	22 30       	cpi	r18, 0x02	; 2
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <GPT_voidInit+0x412>
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	61 f0       	breq	.+24     	; 0x2d40 <GPT_voidInit+0x428>
    2d28:	46 c0       	rjmp	.+140    	; 0x2db6 <GPT_voidInit+0x49e>
    2d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	31 05       	cpc	r19, r1
    2d32:	21 f1       	breq	.+72     	; 0x2d7c <GPT_voidInit+0x464>
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	9c 81       	ldd	r25, Y+4	; 0x04
    2d38:	83 30       	cpi	r24, 0x03	; 3
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	71 f1       	breq	.+92     	; 0x2d9a <GPT_voidInit+0x482>
    2d3e:	3b c0       	rjmp	.+118    	; 0x2db6 <GPT_voidInit+0x49e>
		{
		case GPT_OUT_DISCONCTED:
			CLR_BIT(TIMER_TCCR2,4);
    2d40:	a5 e4       	ldi	r26, 0x45	; 69
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e5 e4       	ldi	r30, 0x45	; 69
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	8f 7e       	andi	r24, 0xEF	; 239
    2d4c:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR2,5);
    2d4e:	a5 e4       	ldi	r26, 0x45	; 69
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e5 e4       	ldi	r30, 0x45	; 69
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8f 7d       	andi	r24, 0xDF	; 223
    2d5a:	8c 93       	st	X, r24
    2d5c:	2c c0       	rjmp	.+88     	; 0x2db6 <GPT_voidInit+0x49e>
			break;

		case GPT_OUT_TOGGLE:
			SET_BIT(TIMER_TCCR2,4);
    2d5e:	a5 e4       	ldi	r26, 0x45	; 69
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e5 e4       	ldi	r30, 0x45	; 69
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	80 61       	ori	r24, 0x10	; 16
    2d6a:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR2,5);
    2d6c:	a5 e4       	ldi	r26, 0x45	; 69
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e5 e4       	ldi	r30, 0x45	; 69
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7d       	andi	r24, 0xDF	; 223
    2d78:	8c 93       	st	X, r24
    2d7a:	1d c0       	rjmp	.+58     	; 0x2db6 <GPT_voidInit+0x49e>
			break;

		case GPT_OUT_CLR:
			CLR_BIT(TIMER_TCCR2,4);
    2d7c:	a5 e4       	ldi	r26, 0x45	; 69
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e5 e4       	ldi	r30, 0x45	; 69
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 7e       	andi	r24, 0xEF	; 239
    2d88:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR2,5);
    2d8a:	a5 e4       	ldi	r26, 0x45	; 69
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e5 e4       	ldi	r30, 0x45	; 69
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	80 62       	ori	r24, 0x20	; 32
    2d96:	8c 93       	st	X, r24
    2d98:	0e c0       	rjmp	.+28     	; 0x2db6 <GPT_voidInit+0x49e>
			break;

		case GPT_OUT_SET:
			SET_BIT(TIMER_TCCR2,4);
    2d9a:	a5 e4       	ldi	r26, 0x45	; 69
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e5 e4       	ldi	r30, 0x45	; 69
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	80 61       	ori	r24, 0x10	; 16
    2da6:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR2,5);
    2da8:	a5 e4       	ldi	r26, 0x45	; 69
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e5 e4       	ldi	r30, 0x45	; 69
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 62       	ori	r24, 0x20	; 32
    2db4:	8c 93       	st	X, r24
			break;

		default:  break;
		}

		GPT_voidSetClockSource(GPT_CHANNEL_TIMER2,config->Timer2_Clk);
    2db6:	e9 81       	ldd	r30, Y+1	; 0x01
    2db8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dba:	90 85       	ldd	r25, Z+8	; 0x08
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	69 2f       	mov	r22, r25
    2dc0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <GPT_voidSetClockSource>
	}


}
    2dc4:	2a 96       	adiw	r28, 0x0a	; 10
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <GPT_voidSetClockSource>:

void GPT_voidSetClockSource  (Gpt_Channel_Type  Channel,Gpt_Clk_Prescaller_Type Clock )
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	2a 97       	sbiw	r28, 0x0a	; 10
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	6a 83       	std	Y+2, r22	; 0x02
	switch (Channel)
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	3a 87       	std	Y+10, r19	; 0x0a
    2df6:	29 87       	std	Y+9, r18	; 0x09
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	91 05       	cpc	r25, r1
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <GPT_voidSetClockSource+0x2e>
    2e02:	fb c0       	rjmp	.+502    	; 0x2ffa <GPT_voidSetClockSource+0x224>
    2e04:	29 85       	ldd	r18, Y+9	; 0x09
    2e06:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e08:	22 30       	cpi	r18, 0x02	; 2
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <GPT_voidSetClockSource+0x3a>
    2e0e:	e5 c1       	rjmp	.+970    	; 0x31da <GPT_voidSetClockSource+0x404>
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <GPT_voidSetClockSource+0x44>
    2e18:	c8 c2       	rjmp	.+1424   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
	{
	/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer0 Prescaller >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
	case GPT_CHANNEL_TIMER0 :
		switch (Clock)
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	38 87       	std	Y+8, r19	; 0x08
    2e22:	2f 83       	std	Y+7, r18	; 0x07
    2e24:	8f 81       	ldd	r24, Y+7	; 0x07
    2e26:	98 85       	ldd	r25, Y+8	; 0x08
    2e28:	84 30       	cpi	r24, 0x04	; 4
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <GPT_voidSetClockSource+0x5a>
    2e2e:	77 c0       	rjmp	.+238    	; 0x2f1e <GPT_voidSetClockSource+0x148>
    2e30:	2f 81       	ldd	r18, Y+7	; 0x07
    2e32:	38 85       	ldd	r19, Y+8	; 0x08
    2e34:	25 30       	cpi	r18, 0x05	; 5
    2e36:	31 05       	cpc	r19, r1
    2e38:	8c f4       	brge	.+34     	; 0x2e5c <GPT_voidSetClockSource+0x86>
    2e3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3c:	98 85       	ldd	r25, Y+8	; 0x08
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	91 05       	cpc	r25, r1
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <GPT_voidSetClockSource+0x70>
    2e44:	40 c0       	rjmp	.+128    	; 0x2ec6 <GPT_voidSetClockSource+0xf0>
    2e46:	2f 81       	ldd	r18, Y+7	; 0x07
    2e48:	38 85       	ldd	r19, Y+8	; 0x08
    2e4a:	22 30       	cpi	r18, 0x02	; 2
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <GPT_voidSetClockSource+0x7c>
    2e50:	50 c0       	rjmp	.+160    	; 0x2ef2 <GPT_voidSetClockSource+0x11c>
    2e52:	8f 81       	ldd	r24, Y+7	; 0x07
    2e54:	98 85       	ldd	r25, Y+8	; 0x08
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	01 f1       	breq	.+64     	; 0x2e9a <GPT_voidSetClockSource+0xc4>
    2e5a:	a7 c2       	rjmp	.+1358   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
    2e5c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e5e:	38 85       	ldd	r19, Y+8	; 0x08
    2e60:	27 30       	cpi	r18, 0x07	; 7
    2e62:	31 05       	cpc	r19, r1
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <GPT_voidSetClockSource+0x92>
    2e66:	87 c0       	rjmp	.+270    	; 0x2f76 <GPT_voidSetClockSource+0x1a0>
    2e68:	8f 81       	ldd	r24, Y+7	; 0x07
    2e6a:	98 85       	ldd	r25, Y+8	; 0x08
    2e6c:	88 30       	cpi	r24, 0x08	; 8
    2e6e:	91 05       	cpc	r25, r1
    2e70:	3c f4       	brge	.+14     	; 0x2e80 <GPT_voidSetClockSource+0xaa>
    2e72:	2f 81       	ldd	r18, Y+7	; 0x07
    2e74:	38 85       	ldd	r19, Y+8	; 0x08
    2e76:	26 30       	cpi	r18, 0x06	; 6
    2e78:	31 05       	cpc	r19, r1
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <GPT_voidSetClockSource+0xa8>
    2e7c:	66 c0       	rjmp	.+204    	; 0x2f4a <GPT_voidSetClockSource+0x174>
    2e7e:	95 c2       	rjmp	.+1322   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
    2e80:	8f 81       	ldd	r24, Y+7	; 0x07
    2e82:	98 85       	ldd	r25, Y+8	; 0x08
    2e84:	88 30       	cpi	r24, 0x08	; 8
    2e86:	91 05       	cpc	r25, r1
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <GPT_voidSetClockSource+0xb6>
    2e8a:	8b c0       	rjmp	.+278    	; 0x2fa2 <GPT_voidSetClockSource+0x1cc>
    2e8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e8e:	38 85       	ldd	r19, Y+8	; 0x08
    2e90:	29 30       	cpi	r18, 0x09	; 9
    2e92:	31 05       	cpc	r19, r1
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <GPT_voidSetClockSource+0xc2>
    2e96:	9b c0       	rjmp	.+310    	; 0x2fce <GPT_voidSetClockSource+0x1f8>
    2e98:	88 c2       	rjmp	.+1296   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
		{
		case GPT_CLK_OFF:
			CLR_BIT(TIMER_TCCR0,0);
    2e9a:	a3 e5       	ldi	r26, 0x53	; 83
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8e 7f       	andi	r24, 0xFE	; 254
    2ea6:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,1);
    2ea8:	a3 e5       	ldi	r26, 0x53	; 83
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e3 e5       	ldi	r30, 0x53	; 83
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	8d 7f       	andi	r24, 0xFD	; 253
    2eb4:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,2);
    2eb6:	a3 e5       	ldi	r26, 0x53	; 83
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e3 e5       	ldi	r30, 0x53	; 83
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8b 7f       	andi	r24, 0xFB	; 251
    2ec2:	8c 93       	st	X, r24
    2ec4:	72 c2       	rjmp	.+1252   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_PRESCALLER_1:
			SET_BIT(TIMER_TCCR0,0);
    2ec6:	a3 e5       	ldi	r26, 0x53	; 83
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e3 e5       	ldi	r30, 0x53	; 83
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 60       	ori	r24, 0x01	; 1
    2ed2:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,1);
    2ed4:	a3 e5       	ldi	r26, 0x53	; 83
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e3 e5       	ldi	r30, 0x53	; 83
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	8d 7f       	andi	r24, 0xFD	; 253
    2ee0:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,2);
    2ee2:	a3 e5       	ldi	r26, 0x53	; 83
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e3 e5       	ldi	r30, 0x53	; 83
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	8b 7f       	andi	r24, 0xFB	; 251
    2eee:	8c 93       	st	X, r24
    2ef0:	5c c2       	rjmp	.+1208   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_PRESCALLER_8:
			CLR_BIT(TIMER_TCCR0,0);
    2ef2:	a3 e5       	ldi	r26, 0x53	; 83
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e3 e5       	ldi	r30, 0x53	; 83
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8e 7f       	andi	r24, 0xFE	; 254
    2efe:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,1);
    2f00:	a3 e5       	ldi	r26, 0x53	; 83
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e3 e5       	ldi	r30, 0x53	; 83
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	82 60       	ori	r24, 0x02	; 2
    2f0c:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,2);
    2f0e:	a3 e5       	ldi	r26, 0x53	; 83
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e3 e5       	ldi	r30, 0x53	; 83
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	8b 7f       	andi	r24, 0xFB	; 251
    2f1a:	8c 93       	st	X, r24
    2f1c:	46 c2       	rjmp	.+1164   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_PRESCALLER_64:
			SET_BIT(TIMER_TCCR0,0);
    2f1e:	a3 e5       	ldi	r26, 0x53	; 83
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e3 e5       	ldi	r30, 0x53	; 83
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	81 60       	ori	r24, 0x01	; 1
    2f2a:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,1);
    2f2c:	a3 e5       	ldi	r26, 0x53	; 83
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e3 e5       	ldi	r30, 0x53	; 83
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	82 60       	ori	r24, 0x02	; 2
    2f38:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,2);
    2f3a:	a3 e5       	ldi	r26, 0x53	; 83
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e3 e5       	ldi	r30, 0x53	; 83
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	8b 7f       	andi	r24, 0xFB	; 251
    2f46:	8c 93       	st	X, r24
    2f48:	30 c2       	rjmp	.+1120   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_PRESCALLER_256:
			CLR_BIT(TIMER_TCCR2,0);
    2f4a:	a5 e4       	ldi	r26, 0x45	; 69
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	e5 e4       	ldi	r30, 0x45	; 69
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	8e 7f       	andi	r24, 0xFE	; 254
    2f56:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR2,1);
    2f58:	a5 e4       	ldi	r26, 0x45	; 69
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e5 e4       	ldi	r30, 0x45	; 69
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	8d 7f       	andi	r24, 0xFD	; 253
    2f64:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR2,2);
    2f66:	a5 e4       	ldi	r26, 0x45	; 69
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e5 e4       	ldi	r30, 0x45	; 69
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	84 60       	ori	r24, 0x04	; 4
    2f72:	8c 93       	st	X, r24
    2f74:	1a c2       	rjmp	.+1076   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_PRESCALLER_1024:
			SET_BIT(TIMER_TCCR0,0);
    2f76:	a3 e5       	ldi	r26, 0x53	; 83
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e3 e5       	ldi	r30, 0x53	; 83
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	81 60       	ori	r24, 0x01	; 1
    2f82:	8c 93       	st	X, r24
			CLR_BIT(TIMER_TCCR0,1);
    2f84:	a3 e5       	ldi	r26, 0x53	; 83
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e3 e5       	ldi	r30, 0x53	; 83
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8d 7f       	andi	r24, 0xFD	; 253
    2f90:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,2);
    2f92:	a3 e5       	ldi	r26, 0x53	; 83
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	e3 e5       	ldi	r30, 0x53	; 83
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	84 60       	ori	r24, 0x04	; 4
    2f9e:	8c 93       	st	X, r24
    2fa0:	04 c2       	rjmp	.+1032   	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_EXT_FALLIGN_EDGE:
			CLR_BIT(TIMER_TCCR0,0);
    2fa2:	a3 e5       	ldi	r26, 0x53	; 83
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e3 e5       	ldi	r30, 0x53	; 83
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	8e 7f       	andi	r24, 0xFE	; 254
    2fae:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,1);
    2fb0:	a3 e5       	ldi	r26, 0x53	; 83
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e3 e5       	ldi	r30, 0x53	; 83
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	82 60       	ori	r24, 0x02	; 2
    2fbc:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,2);
    2fbe:	a3 e5       	ldi	r26, 0x53	; 83
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e3 e5       	ldi	r30, 0x53	; 83
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	84 60       	ori	r24, 0x04	; 4
    2fca:	8c 93       	st	X, r24
    2fcc:	ee c1       	rjmp	.+988    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			break;

		case GPT_CLK_EXT_RISING_EDGE:
			SET_BIT(TIMER_TCCR0,0);
    2fce:	a3 e5       	ldi	r26, 0x53	; 83
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e3 e5       	ldi	r30, 0x53	; 83
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	81 60       	ori	r24, 0x01	; 1
    2fda:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,1);
    2fdc:	a3 e5       	ldi	r26, 0x53	; 83
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e3 e5       	ldi	r30, 0x53	; 83
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	82 60       	ori	r24, 0x02	; 2
    2fe8:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,2);
    2fea:	a3 e5       	ldi	r26, 0x53	; 83
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e3 e5       	ldi	r30, 0x53	; 83
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	84 60       	ori	r24, 0x04	; 4
    2ff6:	8c 93       	st	X, r24
    2ff8:	d8 c1       	rjmp	.+944    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
		default: break;
		}
		break;
		/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer1 Prescaller >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
		case GPT_CHANNEL_TIMER1 :
			switch (Clock)
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	3e 83       	std	Y+6, r19	; 0x06
    3002:	2d 83       	std	Y+5, r18	; 0x05
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	84 30       	cpi	r24, 0x04	; 4
    300a:	91 05       	cpc	r25, r1
    300c:	09 f4       	brne	.+2      	; 0x3010 <GPT_voidSetClockSource+0x23a>
    300e:	77 c0       	rjmp	.+238    	; 0x30fe <GPT_voidSetClockSource+0x328>
    3010:	2d 81       	ldd	r18, Y+5	; 0x05
    3012:	3e 81       	ldd	r19, Y+6	; 0x06
    3014:	25 30       	cpi	r18, 0x05	; 5
    3016:	31 05       	cpc	r19, r1
    3018:	8c f4       	brge	.+34     	; 0x303c <GPT_voidSetClockSource+0x266>
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	91 05       	cpc	r25, r1
    3022:	09 f4       	brne	.+2      	; 0x3026 <GPT_voidSetClockSource+0x250>
    3024:	40 c0       	rjmp	.+128    	; 0x30a6 <GPT_voidSetClockSource+0x2d0>
    3026:	2d 81       	ldd	r18, Y+5	; 0x05
    3028:	3e 81       	ldd	r19, Y+6	; 0x06
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <GPT_voidSetClockSource+0x25c>
    3030:	50 c0       	rjmp	.+160    	; 0x30d2 <GPT_voidSetClockSource+0x2fc>
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	01 f1       	breq	.+64     	; 0x307a <GPT_voidSetClockSource+0x2a4>
    303a:	b7 c1       	rjmp	.+878    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
    303c:	2d 81       	ldd	r18, Y+5	; 0x05
    303e:	3e 81       	ldd	r19, Y+6	; 0x06
    3040:	27 30       	cpi	r18, 0x07	; 7
    3042:	31 05       	cpc	r19, r1
    3044:	09 f4       	brne	.+2      	; 0x3048 <GPT_voidSetClockSource+0x272>
    3046:	87 c0       	rjmp	.+270    	; 0x3156 <GPT_voidSetClockSource+0x380>
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	88 30       	cpi	r24, 0x08	; 8
    304e:	91 05       	cpc	r25, r1
    3050:	3c f4       	brge	.+14     	; 0x3060 <GPT_voidSetClockSource+0x28a>
    3052:	2d 81       	ldd	r18, Y+5	; 0x05
    3054:	3e 81       	ldd	r19, Y+6	; 0x06
    3056:	26 30       	cpi	r18, 0x06	; 6
    3058:	31 05       	cpc	r19, r1
    305a:	09 f4       	brne	.+2      	; 0x305e <GPT_voidSetClockSource+0x288>
    305c:	66 c0       	rjmp	.+204    	; 0x312a <GPT_voidSetClockSource+0x354>
    305e:	a5 c1       	rjmp	.+842    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	88 30       	cpi	r24, 0x08	; 8
    3066:	91 05       	cpc	r25, r1
    3068:	09 f4       	brne	.+2      	; 0x306c <GPT_voidSetClockSource+0x296>
    306a:	8b c0       	rjmp	.+278    	; 0x3182 <GPT_voidSetClockSource+0x3ac>
    306c:	2d 81       	ldd	r18, Y+5	; 0x05
    306e:	3e 81       	ldd	r19, Y+6	; 0x06
    3070:	29 30       	cpi	r18, 0x09	; 9
    3072:	31 05       	cpc	r19, r1
    3074:	09 f4       	brne	.+2      	; 0x3078 <GPT_voidSetClockSource+0x2a2>
    3076:	9b c0       	rjmp	.+310    	; 0x31ae <GPT_voidSetClockSource+0x3d8>
    3078:	98 c1       	rjmp	.+816    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			{
			case GPT_CLK_OFF:
				CLR_BIT(TIMER_TCCR1B,0);
    307a:	ae e4       	ldi	r26, 0x4E	; 78
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ee e4       	ldi	r30, 0x4E	; 78
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8e 7f       	andi	r24, 0xFE	; 254
    3086:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,1);
    3088:	ae e4       	ldi	r26, 0x4E	; 78
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	ee e4       	ldi	r30, 0x4E	; 78
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	8d 7f       	andi	r24, 0xFD	; 253
    3094:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,2);
    3096:	ae e4       	ldi	r26, 0x4E	; 78
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ee e4       	ldi	r30, 0x4E	; 78
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	8b 7f       	andi	r24, 0xFB	; 251
    30a2:	8c 93       	st	X, r24
    30a4:	82 c1       	rjmp	.+772    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_PRESCALLER_1:
				SET_BIT(TIMER_TCCR1B,0);
    30a6:	ae e4       	ldi	r26, 0x4E	; 78
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	ee e4       	ldi	r30, 0x4E	; 78
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	81 60       	ori	r24, 0x01	; 1
    30b2:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,1);
    30b4:	ae e4       	ldi	r26, 0x4E	; 78
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	ee e4       	ldi	r30, 0x4E	; 78
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8d 7f       	andi	r24, 0xFD	; 253
    30c0:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,2);
    30c2:	ae e4       	ldi	r26, 0x4E	; 78
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	ee e4       	ldi	r30, 0x4E	; 78
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	8b 7f       	andi	r24, 0xFB	; 251
    30ce:	8c 93       	st	X, r24
    30d0:	6c c1       	rjmp	.+728    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_PRESCALLER_8:
				CLR_BIT(TIMER_TCCR1B,0);
    30d2:	ae e4       	ldi	r26, 0x4E	; 78
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	ee e4       	ldi	r30, 0x4E	; 78
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	8e 7f       	andi	r24, 0xFE	; 254
    30de:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,1);
    30e0:	ae e4       	ldi	r26, 0x4E	; 78
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	ee e4       	ldi	r30, 0x4E	; 78
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	82 60       	ori	r24, 0x02	; 2
    30ec:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,2);
    30ee:	ae e4       	ldi	r26, 0x4E	; 78
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ee e4       	ldi	r30, 0x4E	; 78
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	8b 7f       	andi	r24, 0xFB	; 251
    30fa:	8c 93       	st	X, r24
    30fc:	56 c1       	rjmp	.+684    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_PRESCALLER_64:
				SET_BIT(TIMER_TCCR1B,0);
    30fe:	ae e4       	ldi	r26, 0x4E	; 78
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ee e4       	ldi	r30, 0x4E	; 78
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	81 60       	ori	r24, 0x01	; 1
    310a:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,1);
    310c:	ae e4       	ldi	r26, 0x4E	; 78
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ee e4       	ldi	r30, 0x4E	; 78
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	82 60       	ori	r24, 0x02	; 2
    3118:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,2);
    311a:	ae e4       	ldi	r26, 0x4E	; 78
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	ee e4       	ldi	r30, 0x4E	; 78
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	8b 7f       	andi	r24, 0xFB	; 251
    3126:	8c 93       	st	X, r24
    3128:	40 c1       	rjmp	.+640    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;


			case GPT_CLK_PRESCALLER_256:
				CLR_BIT(TIMER_TCCR1B,0);
    312a:	ae e4       	ldi	r26, 0x4E	; 78
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	ee e4       	ldi	r30, 0x4E	; 78
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	8e 7f       	andi	r24, 0xFE	; 254
    3136:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,1);
    3138:	ae e4       	ldi	r26, 0x4E	; 78
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	ee e4       	ldi	r30, 0x4E	; 78
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	8d 7f       	andi	r24, 0xFD	; 253
    3144:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,2);
    3146:	ae e4       	ldi	r26, 0x4E	; 78
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	ee e4       	ldi	r30, 0x4E	; 78
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	84 60       	ori	r24, 0x04	; 4
    3152:	8c 93       	st	X, r24
    3154:	2a c1       	rjmp	.+596    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_PRESCALLER_1024:
				SET_BIT(TIMER_TCCR1B,0);
    3156:	ae e4       	ldi	r26, 0x4E	; 78
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	ee e4       	ldi	r30, 0x4E	; 78
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	81 60       	ori	r24, 0x01	; 1
    3162:	8c 93       	st	X, r24
				CLR_BIT(TIMER_TCCR1B,1);
    3164:	ae e4       	ldi	r26, 0x4E	; 78
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ee e4       	ldi	r30, 0x4E	; 78
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8d 7f       	andi	r24, 0xFD	; 253
    3170:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,2);
    3172:	ae e4       	ldi	r26, 0x4E	; 78
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ee e4       	ldi	r30, 0x4E	; 78
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	84 60       	ori	r24, 0x04	; 4
    317e:	8c 93       	st	X, r24
    3180:	14 c1       	rjmp	.+552    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_EXT_FALLIGN_EDGE:
				CLR_BIT(TIMER_TCCR1B,0);
    3182:	ae e4       	ldi	r26, 0x4E	; 78
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	ee e4       	ldi	r30, 0x4E	; 78
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	8e 7f       	andi	r24, 0xFE	; 254
    318e:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,1);
    3190:	ae e4       	ldi	r26, 0x4E	; 78
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	ee e4       	ldi	r30, 0x4E	; 78
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	82 60       	ori	r24, 0x02	; 2
    319c:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,2);
    319e:	ae e4       	ldi	r26, 0x4E	; 78
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ee e4       	ldi	r30, 0x4E	; 78
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	84 60       	ori	r24, 0x04	; 4
    31aa:	8c 93       	st	X, r24
    31ac:	fe c0       	rjmp	.+508    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				break;

			case GPT_CLK_EXT_RISING_EDGE:
				SET_BIT(TIMER_TCCR1B,0);
    31ae:	ae e4       	ldi	r26, 0x4E	; 78
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	ee e4       	ldi	r30, 0x4E	; 78
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	81 60       	ori	r24, 0x01	; 1
    31ba:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,1);
    31bc:	ae e4       	ldi	r26, 0x4E	; 78
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	ee e4       	ldi	r30, 0x4E	; 78
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	82 60       	ori	r24, 0x02	; 2
    31c8:	8c 93       	st	X, r24
				SET_BIT(TIMER_TCCR1B,2);
    31ca:	ae e4       	ldi	r26, 0x4E	; 78
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	ee e4       	ldi	r30, 0x4E	; 78
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	84 60       	ori	r24, 0x04	; 4
    31d6:	8c 93       	st	X, r24
    31d8:	e8 c0       	rjmp	.+464    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
			default: break;
			}
			break;
			/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Timer2 Prescaller >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
			case GPT_CHANNEL_TIMER2 :
				switch (Clock)
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	3c 83       	std	Y+4, r19	; 0x04
    31e2:	2b 83       	std	Y+3, r18	; 0x03
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	83 30       	cpi	r24, 0x03	; 3
    31ea:	91 05       	cpc	r25, r1
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <GPT_voidSetClockSource+0x41a>
    31ee:	70 c0       	rjmp	.+224    	; 0x32d0 <GPT_voidSetClockSource+0x4fa>
    31f0:	2b 81       	ldd	r18, Y+3	; 0x03
    31f2:	3c 81       	ldd	r19, Y+4	; 0x04
    31f4:	24 30       	cpi	r18, 0x04	; 4
    31f6:	31 05       	cpc	r19, r1
    31f8:	84 f4       	brge	.+32     	; 0x321a <GPT_voidSetClockSource+0x444>
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	91 05       	cpc	r25, r1
    3202:	d1 f1       	breq	.+116    	; 0x3278 <GPT_voidSetClockSource+0x4a2>
    3204:	2b 81       	ldd	r18, Y+3	; 0x03
    3206:	3c 81       	ldd	r19, Y+4	; 0x04
    3208:	22 30       	cpi	r18, 0x02	; 2
    320a:	31 05       	cpc	r19, r1
    320c:	0c f0       	brlt	.+2      	; 0x3210 <GPT_voidSetClockSource+0x43a>
    320e:	4a c0       	rjmp	.+148    	; 0x32a4 <GPT_voidSetClockSource+0x4ce>
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	d1 f0       	breq	.+52     	; 0x324c <GPT_voidSetClockSource+0x476>
    3218:	c8 c0       	rjmp	.+400    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
    321a:	2b 81       	ldd	r18, Y+3	; 0x03
    321c:	3c 81       	ldd	r19, Y+4	; 0x04
    321e:	25 30       	cpi	r18, 0x05	; 5
    3220:	31 05       	cpc	r19, r1
    3222:	09 f4       	brne	.+2      	; 0x3226 <GPT_voidSetClockSource+0x450>
    3224:	81 c0       	rjmp	.+258    	; 0x3328 <GPT_voidSetClockSource+0x552>
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	85 30       	cpi	r24, 0x05	; 5
    322c:	91 05       	cpc	r25, r1
    322e:	0c f4       	brge	.+2      	; 0x3232 <GPT_voidSetClockSource+0x45c>
    3230:	65 c0       	rjmp	.+202    	; 0x32fc <GPT_voidSetClockSource+0x526>
    3232:	2b 81       	ldd	r18, Y+3	; 0x03
    3234:	3c 81       	ldd	r19, Y+4	; 0x04
    3236:	26 30       	cpi	r18, 0x06	; 6
    3238:	31 05       	cpc	r19, r1
    323a:	09 f4       	brne	.+2      	; 0x323e <GPT_voidSetClockSource+0x468>
    323c:	8b c0       	rjmp	.+278    	; 0x3354 <GPT_voidSetClockSource+0x57e>
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	9c 81       	ldd	r25, Y+4	; 0x04
    3242:	87 30       	cpi	r24, 0x07	; 7
    3244:	91 05       	cpc	r25, r1
    3246:	09 f4       	brne	.+2      	; 0x324a <GPT_voidSetClockSource+0x474>
    3248:	9b c0       	rjmp	.+310    	; 0x3380 <GPT_voidSetClockSource+0x5aa>
    324a:	af c0       	rjmp	.+350    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
				{
				case GPT_CLK_OFF:
					CLR_BIT(TIMER_TCCR2,0);
    324c:	a5 e4       	ldi	r26, 0x45	; 69
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e5 e4       	ldi	r30, 0x45	; 69
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8e 7f       	andi	r24, 0xFE	; 254
    3258:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,1);
    325a:	a5 e4       	ldi	r26, 0x45	; 69
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e5 e4       	ldi	r30, 0x45	; 69
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	8d 7f       	andi	r24, 0xFD	; 253
    3266:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,2);
    3268:	a5 e4       	ldi	r26, 0x45	; 69
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e5 e4       	ldi	r30, 0x45	; 69
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8b 7f       	andi	r24, 0xFB	; 251
    3274:	8c 93       	st	X, r24
    3276:	99 c0       	rjmp	.+306    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_1:
					SET_BIT(TIMER_TCCR2,0);
    3278:	a5 e4       	ldi	r26, 0x45	; 69
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e5 e4       	ldi	r30, 0x45	; 69
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	81 60       	ori	r24, 0x01	; 1
    3284:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,1);
    3286:	a5 e4       	ldi	r26, 0x45	; 69
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e5 e4       	ldi	r30, 0x45	; 69
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8d 7f       	andi	r24, 0xFD	; 253
    3292:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,2);
    3294:	a5 e4       	ldi	r26, 0x45	; 69
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e5 e4       	ldi	r30, 0x45	; 69
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	8b 7f       	andi	r24, 0xFB	; 251
    32a0:	8c 93       	st	X, r24
    32a2:	83 c0       	rjmp	.+262    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_8:
					CLR_BIT(TIMER_TCCR2,0);
    32a4:	a5 e4       	ldi	r26, 0x45	; 69
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e5 e4       	ldi	r30, 0x45	; 69
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8e 7f       	andi	r24, 0xFE	; 254
    32b0:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,1);
    32b2:	a5 e4       	ldi	r26, 0x45	; 69
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e5 e4       	ldi	r30, 0x45	; 69
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	82 60       	ori	r24, 0x02	; 2
    32be:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,2);
    32c0:	a5 e4       	ldi	r26, 0x45	; 69
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e5 e4       	ldi	r30, 0x45	; 69
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	8b 7f       	andi	r24, 0xFB	; 251
    32cc:	8c 93       	st	X, r24
    32ce:	6d c0       	rjmp	.+218    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_32:
					SET_BIT(TIMER_TCCR2,0);
    32d0:	a5 e4       	ldi	r26, 0x45	; 69
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	e5 e4       	ldi	r30, 0x45	; 69
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
    32da:	81 60       	ori	r24, 0x01	; 1
    32dc:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,1);
    32de:	a5 e4       	ldi	r26, 0x45	; 69
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	e5 e4       	ldi	r30, 0x45	; 69
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	82 60       	ori	r24, 0x02	; 2
    32ea:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,2);
    32ec:	a5 e4       	ldi	r26, 0x45	; 69
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e5 e4       	ldi	r30, 0x45	; 69
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	8b 7f       	andi	r24, 0xFB	; 251
    32f8:	8c 93       	st	X, r24
    32fa:	57 c0       	rjmp	.+174    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;


				case GPT_CLK_PRESCALLER_64:
					CLR_BIT(TIMER_TCCR2,0);
    32fc:	a5 e4       	ldi	r26, 0x45	; 69
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e5 e4       	ldi	r30, 0x45	; 69
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	8e 7f       	andi	r24, 0xFE	; 254
    3308:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,1);
    330a:	a5 e4       	ldi	r26, 0x45	; 69
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e5 e4       	ldi	r30, 0x45	; 69
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	8d 7f       	andi	r24, 0xFD	; 253
    3316:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,2);
    3318:	a5 e4       	ldi	r26, 0x45	; 69
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e5 e4       	ldi	r30, 0x45	; 69
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	84 60       	ori	r24, 0x04	; 4
    3324:	8c 93       	st	X, r24
    3326:	41 c0       	rjmp	.+130    	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_128:
					SET_BIT(TIMER_TCCR2,0);
    3328:	a5 e4       	ldi	r26, 0x45	; 69
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e5 e4       	ldi	r30, 0x45	; 69
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	81 60       	ori	r24, 0x01	; 1
    3334:	8c 93       	st	X, r24
					CLR_BIT(TIMER_TCCR2,1);
    3336:	a5 e4       	ldi	r26, 0x45	; 69
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e5 e4       	ldi	r30, 0x45	; 69
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	8d 7f       	andi	r24, 0xFD	; 253
    3342:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,2);
    3344:	a5 e4       	ldi	r26, 0x45	; 69
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	e5 e4       	ldi	r30, 0x45	; 69
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	84 60       	ori	r24, 0x04	; 4
    3350:	8c 93       	st	X, r24
    3352:	2b c0       	rjmp	.+86     	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_256:
					CLR_BIT(TIMER_TCCR2,0);
    3354:	a5 e4       	ldi	r26, 0x45	; 69
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e5 e4       	ldi	r30, 0x45	; 69
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	8e 7f       	andi	r24, 0xFE	; 254
    3360:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,1);
    3362:	a5 e4       	ldi	r26, 0x45	; 69
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e5 e4       	ldi	r30, 0x45	; 69
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	82 60       	ori	r24, 0x02	; 2
    336e:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,2);
    3370:	a5 e4       	ldi	r26, 0x45	; 69
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e5 e4       	ldi	r30, 0x45	; 69
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	84 60       	ori	r24, 0x04	; 4
    337c:	8c 93       	st	X, r24
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <GPT_voidSetClockSource+0x5d4>
					break;

				case GPT_CLK_PRESCALLER_1024:
					SET_BIT(TIMER_TCCR2,0);
    3380:	a5 e4       	ldi	r26, 0x45	; 69
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e5 e4       	ldi	r30, 0x45	; 69
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	81 60       	ori	r24, 0x01	; 1
    338c:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,1);
    338e:	a5 e4       	ldi	r26, 0x45	; 69
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e5 e4       	ldi	r30, 0x45	; 69
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	82 60       	ori	r24, 0x02	; 2
    339a:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,2);
    339c:	a5 e4       	ldi	r26, 0x45	; 69
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e5 e4       	ldi	r30, 0x45	; 69
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	84 60       	ori	r24, 0x04	; 4
    33a8:	8c 93       	st	X, r24
				default:  break;
				}
				break;

	}
}
    33aa:	2a 96       	adiw	r28, 0x0a	; 10
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <GPT_voidSetCounterValue>:
/*<<<<<<<<<<<<<<<<<<<<<<<Set Counter Value TCNT Register >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void GPT_voidSetCounterValue (Gpt_Channel_Type  Channel, u16 Copy_u16Value)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <GPT_voidSetCounterValue+0x6>
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <GPT_voidSetCounterValue+0x8>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	7b 83       	std	Y+3, r23	; 0x03
    33ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (Channel)
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	3d 83       	std	Y+5, r19	; 0x05
    33d8:	2c 83       	std	Y+4, r18	; 0x04
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	91 05       	cpc	r25, r1
    33e2:	71 f0       	breq	.+28     	; 0x3400 <GPT_voidSetCounterValue+0x44>
    33e4:	2c 81       	ldd	r18, Y+4	; 0x04
    33e6:	3d 81       	ldd	r19, Y+5	; 0x05
    33e8:	22 30       	cpi	r18, 0x02	; 2
    33ea:	31 05       	cpc	r19, r1
    33ec:	81 f0       	breq	.+32     	; 0x340e <GPT_voidSetCounterValue+0x52>
    33ee:	8c 81       	ldd	r24, Y+4	; 0x04
    33f0:	9d 81       	ldd	r25, Y+5	; 0x05
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	81 f4       	brne	.+32     	; 0x3416 <GPT_voidSetCounterValue+0x5a>
	{
	case GPT_CHANNEL_TIMER0: TIMER_TCNT0=Copy_u16Value; break;
    33f6:	e2 e5       	ldi	r30, 0x52	; 82
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	80 83       	st	Z, r24
    33fe:	0b c0       	rjmp	.+22     	; 0x3416 <GPT_voidSetCounterValue+0x5a>
	case GPT_CHANNEL_TIMER1: TIMER_TCNT1=Copy_u16Value; break;
    3400:	ec e4       	ldi	r30, 0x4C	; 76
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	9b 81       	ldd	r25, Y+3	; 0x03
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <GPT_voidSetCounterValue+0x5a>
	case GPT_CHANNEL_TIMER2: TIMER_TCNT2=Copy_u16Value; break;
    340e:	e4 e4       	ldi	r30, 0x44	; 68
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	80 83       	st	Z, r24
	default: break;
	}
}
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <GPT_voidSetCompareValue>:

/*<<<<<<<<<<<<<<<<<<<<<<<Set Value in CTC Mode OCR register >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void GPT_voidSetCompareValue (Gpt_CompareChannelType  Channel, u16 Copy_u16Value)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	00 d0       	rcall	.+0      	; 0x342c <GPT_voidSetCompareValue+0x6>
    342c:	00 d0       	rcall	.+0      	; 0x342e <GPT_voidSetCompareValue+0x8>
    342e:	0f 92       	push	r0
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	7b 83       	std	Y+3, r23	; 0x03
    3438:	6a 83       	std	Y+2, r22	; 0x02
	switch (Channel)
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	3d 83       	std	Y+5, r19	; 0x05
    3442:	2c 83       	std	Y+4, r18	; 0x04
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	9d 81       	ldd	r25, Y+5	; 0x05
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	91 05       	cpc	r25, r1
    344c:	d1 f0       	breq	.+52     	; 0x3482 <GPT_voidSetCompareValue+0x5c>
    344e:	2c 81       	ldd	r18, Y+4	; 0x04
    3450:	3d 81       	ldd	r19, Y+5	; 0x05
    3452:	22 30       	cpi	r18, 0x02	; 2
    3454:	31 05       	cpc	r19, r1
    3456:	2c f4       	brge	.+10     	; 0x3462 <GPT_voidSetCompareValue+0x3c>
    3458:	8c 81       	ldd	r24, Y+4	; 0x04
    345a:	9d 81       	ldd	r25, Y+5	; 0x05
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	61 f0       	breq	.+24     	; 0x3478 <GPT_voidSetCompareValue+0x52>
    3460:	22 c0       	rjmp	.+68     	; 0x34a6 <GPT_voidSetCompareValue+0x80>
    3462:	2c 81       	ldd	r18, Y+4	; 0x04
    3464:	3d 81       	ldd	r19, Y+5	; 0x05
    3466:	22 30       	cpi	r18, 0x02	; 2
    3468:	31 05       	cpc	r19, r1
    346a:	91 f0       	breq	.+36     	; 0x3490 <GPT_voidSetCompareValue+0x6a>
    346c:	8c 81       	ldd	r24, Y+4	; 0x04
    346e:	9d 81       	ldd	r25, Y+5	; 0x05
    3470:	83 30       	cpi	r24, 0x03	; 3
    3472:	91 05       	cpc	r25, r1
    3474:	a1 f0       	breq	.+40     	; 0x349e <GPT_voidSetCompareValue+0x78>
    3476:	17 c0       	rjmp	.+46     	; 0x34a6 <GPT_voidSetCompareValue+0x80>
	{
	case GPT_COMP0 : TIMER_OCR0 =Copy_u16Value; break;
    3478:	ec e5       	ldi	r30, 0x5C	; 92
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	80 83       	st	Z, r24
    3480:	12 c0       	rjmp	.+36     	; 0x34a6 <GPT_voidSetCompareValue+0x80>
	case GPT_COMP1A: TIMER_OCR1A=Copy_u16Value; break;
    3482:	eb e4       	ldi	r30, 0x4B	; 75
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	9b 81       	ldd	r25, Y+3	; 0x03
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	80 83       	st	Z, r24
    348e:	0b c0       	rjmp	.+22     	; 0x34a6 <GPT_voidSetCompareValue+0x80>
	case GPT_COMP1B: TIMER_OCR1B=Copy_u16Value; break;
    3490:	e8 e4       	ldi	r30, 0x48	; 72
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	9b 81       	ldd	r25, Y+3	; 0x03
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	04 c0       	rjmp	.+8      	; 0x34a6 <GPT_voidSetCompareValue+0x80>
	case GPT_COMP2 : TIMER_OCR2 =Copy_u16Value; break;
    349e:	e3 e4       	ldi	r30, 0x43	; 67
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	80 83       	st	Z, r24
	default:   break;
	}
}
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <GPT_voidGetTimerValue>:
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<Return Timer Value >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
u16  GPT_voidGetTimerValue   (Gpt_Channel_Type Channel)
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <GPT_voidGetTimerValue+0x6>
    34bc:	00 d0       	rcall	.+0      	; 0x34be <GPT_voidGetTimerValue+0x8>
    34be:	0f 92       	push	r0
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16TimerValue;
	switch (Channel)
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	3d 83       	std	Y+5, r19	; 0x05
    34ce:	2c 83       	std	Y+4, r18	; 0x04
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	9d 81       	ldd	r25, Y+5	; 0x05
    34d4:	81 30       	cpi	r24, 0x01	; 1
    34d6:	91 05       	cpc	r25, r1
    34d8:	89 f0       	breq	.+34     	; 0x34fc <GPT_voidGetTimerValue+0x46>
    34da:	2c 81       	ldd	r18, Y+4	; 0x04
    34dc:	3d 81       	ldd	r19, Y+5	; 0x05
    34de:	22 30       	cpi	r18, 0x02	; 2
    34e0:	31 05       	cpc	r19, r1
    34e2:	99 f0       	breq	.+38     	; 0x350a <GPT_voidGetTimerValue+0x54>
    34e4:	8c 81       	ldd	r24, Y+4	; 0x04
    34e6:	9d 81       	ldd	r25, Y+5	; 0x05
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	b1 f4       	brne	.+44     	; 0x3518 <GPT_voidGetTimerValue+0x62>
	{
	case GPT_CHANNEL_TIMER0: Copy_u16TimerValue=TIMER_TCNT0; break;
    34ec:	e2 e5       	ldi	r30, 0x52	; 82
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9a 83       	std	Y+2, r25	; 0x02
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	0e c0       	rjmp	.+28     	; 0x3518 <GPT_voidGetTimerValue+0x62>
	case GPT_CHANNEL_TIMER1: Copy_u16TimerValue=TIMER_TCNT1; break;
    34fc:	ec e4       	ldi	r30, 0x4C	; 76
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	9a 83       	std	Y+2, r25	; 0x02
    3506:	89 83       	std	Y+1, r24	; 0x01
    3508:	07 c0       	rjmp	.+14     	; 0x3518 <GPT_voidGetTimerValue+0x62>
	case GPT_CHANNEL_TIMER2: Copy_u16TimerValue=TIMER_TCNT2; break;
    350a:	e4 e4       	ldi	r30, 0x44	; 68
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9a 83       	std	Y+2, r25	; 0x02
    3516:	89 83       	std	Y+1, r24	; 0x01

	default:  break;
	}
	return Copy_u16TimerValue;
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	9a 81       	ldd	r25, Y+2	; 0x02

}
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <GPT_voidInerruptEnable>:
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Interrupt Enable >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void GPT_voidInerruptEnable  (Gpt_SourceInterrputType Source)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	00 d0       	rcall	.+0      	; 0x3532 <GPT_voidInerruptEnable+0x6>
    3532:	0f 92       	push	r0
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	89 83       	std	Y+1, r24	; 0x01
	switch (Source)
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	3b 83       	std	Y+3, r19	; 0x03
    3542:	2a 83       	std	Y+2, r18	; 0x02
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	9b 81       	ldd	r25, Y+3	; 0x03
    3548:	83 30       	cpi	r24, 0x03	; 3
    354a:	91 05       	cpc	r25, r1
    354c:	09 f4       	brne	.+2      	; 0x3550 <GPT_voidInerruptEnable+0x24>
    354e:	44 c0       	rjmp	.+136    	; 0x35d8 <GPT_voidInerruptEnable+0xac>
    3550:	2a 81       	ldd	r18, Y+2	; 0x02
    3552:	3b 81       	ldd	r19, Y+3	; 0x03
    3554:	24 30       	cpi	r18, 0x04	; 4
    3556:	31 05       	cpc	r19, r1
    3558:	7c f4       	brge	.+30     	; 0x3578 <GPT_voidInerruptEnable+0x4c>
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	91 05       	cpc	r25, r1
    3562:	11 f1       	breq	.+68     	; 0x35a8 <GPT_voidInerruptEnable+0x7c>
    3564:	2a 81       	ldd	r18, Y+2	; 0x02
    3566:	3b 81       	ldd	r19, Y+3	; 0x03
    3568:	22 30       	cpi	r18, 0x02	; 2
    356a:	31 05       	cpc	r19, r1
    356c:	2c f5       	brge	.+74     	; 0x35b8 <GPT_voidInerruptEnable+0x8c>
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	89 f0       	breq	.+34     	; 0x3598 <GPT_voidInerruptEnable+0x6c>
    3576:	47 c0       	rjmp	.+142    	; 0x3606 <GPT_voidInerruptEnable+0xda>
    3578:	2a 81       	ldd	r18, Y+2	; 0x02
    357a:	3b 81       	ldd	r19, Y+3	; 0x03
    357c:	25 30       	cpi	r18, 0x05	; 5
    357e:	31 05       	cpc	r19, r1
    3580:	99 f1       	breq	.+102    	; 0x35e8 <GPT_voidInerruptEnable+0xbc>
    3582:	8a 81       	ldd	r24, Y+2	; 0x02
    3584:	9b 81       	ldd	r25, Y+3	; 0x03
    3586:	85 30       	cpi	r24, 0x05	; 5
    3588:	91 05       	cpc	r25, r1
    358a:	f4 f0       	brlt	.+60     	; 0x35c8 <GPT_voidInerruptEnable+0x9c>
    358c:	2a 81       	ldd	r18, Y+2	; 0x02
    358e:	3b 81       	ldd	r19, Y+3	; 0x03
    3590:	26 30       	cpi	r18, 0x06	; 6
    3592:	31 05       	cpc	r19, r1
    3594:	89 f1       	breq	.+98     	; 0x35f8 <GPT_voidInerruptEnable+0xcc>
    3596:	37 c0       	rjmp	.+110    	; 0x3606 <GPT_voidInerruptEnable+0xda>
	{
	case GPT_INIT_SOURCE_TIMER0_OVF:   SET_BIT(TIMER_TIMSK,0); break;
    3598:	a9 e5       	ldi	r26, 0x59	; 89
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e9 e5       	ldi	r30, 0x59	; 89
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	81 60       	ori	r24, 0x01	; 1
    35a4:	8c 93       	st	X, r24
    35a6:	2f c0       	rjmp	.+94     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER0_COMP:  SET_BIT(TIMER_TIMSK,1); break;
    35a8:	a9 e5       	ldi	r26, 0x59	; 89
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e9 e5       	ldi	r30, 0x59	; 89
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	82 60       	ori	r24, 0x02	; 2
    35b4:	8c 93       	st	X, r24
    35b6:	27 c0       	rjmp	.+78     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER1_OVF:   SET_BIT(TIMER_TIMSK,2); break;
    35b8:	a9 e5       	ldi	r26, 0x59	; 89
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	e9 e5       	ldi	r30, 0x59	; 89
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	84 60       	ori	r24, 0x04	; 4
    35c4:	8c 93       	st	X, r24
    35c6:	1f c0       	rjmp	.+62     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER1_COMPB: SET_BIT(TIMER_TIMSK,3); break;
    35c8:	a9 e5       	ldi	r26, 0x59	; 89
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e9 e5       	ldi	r30, 0x59	; 89
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	88 60       	ori	r24, 0x08	; 8
    35d4:	8c 93       	st	X, r24
    35d6:	17 c0       	rjmp	.+46     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER1_COMPA: SET_BIT(TIMER_TIMSK,4); break;
    35d8:	a9 e5       	ldi	r26, 0x59	; 89
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	e9 e5       	ldi	r30, 0x59	; 89
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	80 61       	ori	r24, 0x10	; 16
    35e4:	8c 93       	st	X, r24
    35e6:	0f c0       	rjmp	.+30     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER2_OVF:   SET_BIT(TIMER_TIMSK,6); break;
    35e8:	a9 e5       	ldi	r26, 0x59	; 89
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e9 e5       	ldi	r30, 0x59	; 89
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	80 64       	ori	r24, 0x40	; 64
    35f4:	8c 93       	st	X, r24
    35f6:	07 c0       	rjmp	.+14     	; 0x3606 <GPT_voidInerruptEnable+0xda>
	case GPT_INIT_SOURCE_TIMER2_COMP:  SET_BIT(TIMER_TIMSK,7); break;
    35f8:	a9 e5       	ldi	r26, 0x59	; 89
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e9 e5       	ldi	r30, 0x59	; 89
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	80 68       	ori	r24, 0x80	; 128
    3604:	8c 93       	st	X, r24
	default:  break;
	}
}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <GPT_voidInerruptDisable>:
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Interrupt Disable >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void GPT_voidInerruptDisable  (Gpt_SourceInterrputType Source)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <GPT_voidInerruptDisable+0x6>
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	89 83       	std	Y+1, r24	; 0x01
	switch (Source)
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	3b 83       	std	Y+3, r19	; 0x03
    3628:	2a 83       	std	Y+2, r18	; 0x02
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	83 30       	cpi	r24, 0x03	; 3
    3630:	91 05       	cpc	r25, r1
    3632:	09 f4       	brne	.+2      	; 0x3636 <GPT_voidInerruptDisable+0x24>
    3634:	44 c0       	rjmp	.+136    	; 0x36be <GPT_voidInerruptDisable+0xac>
    3636:	2a 81       	ldd	r18, Y+2	; 0x02
    3638:	3b 81       	ldd	r19, Y+3	; 0x03
    363a:	24 30       	cpi	r18, 0x04	; 4
    363c:	31 05       	cpc	r19, r1
    363e:	7c f4       	brge	.+30     	; 0x365e <GPT_voidInerruptDisable+0x4c>
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	91 05       	cpc	r25, r1
    3648:	11 f1       	breq	.+68     	; 0x368e <GPT_voidInerruptDisable+0x7c>
    364a:	2a 81       	ldd	r18, Y+2	; 0x02
    364c:	3b 81       	ldd	r19, Y+3	; 0x03
    364e:	22 30       	cpi	r18, 0x02	; 2
    3650:	31 05       	cpc	r19, r1
    3652:	2c f5       	brge	.+74     	; 0x369e <GPT_voidInerruptDisable+0x8c>
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	9b 81       	ldd	r25, Y+3	; 0x03
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	89 f0       	breq	.+34     	; 0x367e <GPT_voidInerruptDisable+0x6c>
    365c:	47 c0       	rjmp	.+142    	; 0x36ec <GPT_voidInerruptDisable+0xda>
    365e:	2a 81       	ldd	r18, Y+2	; 0x02
    3660:	3b 81       	ldd	r19, Y+3	; 0x03
    3662:	25 30       	cpi	r18, 0x05	; 5
    3664:	31 05       	cpc	r19, r1
    3666:	99 f1       	breq	.+102    	; 0x36ce <GPT_voidInerruptDisable+0xbc>
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	85 30       	cpi	r24, 0x05	; 5
    366e:	91 05       	cpc	r25, r1
    3670:	f4 f0       	brlt	.+60     	; 0x36ae <GPT_voidInerruptDisable+0x9c>
    3672:	2a 81       	ldd	r18, Y+2	; 0x02
    3674:	3b 81       	ldd	r19, Y+3	; 0x03
    3676:	26 30       	cpi	r18, 0x06	; 6
    3678:	31 05       	cpc	r19, r1
    367a:	89 f1       	breq	.+98     	; 0x36de <GPT_voidInerruptDisable+0xcc>
    367c:	37 c0       	rjmp	.+110    	; 0x36ec <GPT_voidInerruptDisable+0xda>
	{
	case GPT_INIT_SOURCE_TIMER0_OVF:   CLR_BIT(TIMER_TIMSK,0); break;
    367e:	a9 e5       	ldi	r26, 0x59	; 89
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e9 e5       	ldi	r30, 0x59	; 89
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	8e 7f       	andi	r24, 0xFE	; 254
    368a:	8c 93       	st	X, r24
    368c:	2f c0       	rjmp	.+94     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER0_COMP:  CLR_BIT(TIMER_TIMSK,1); break;
    368e:	a9 e5       	ldi	r26, 0x59	; 89
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e9 e5       	ldi	r30, 0x59	; 89
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	8d 7f       	andi	r24, 0xFD	; 253
    369a:	8c 93       	st	X, r24
    369c:	27 c0       	rjmp	.+78     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER1_OVF:   CLR_BIT(TIMER_TIMSK,2); break;
    369e:	a9 e5       	ldi	r26, 0x59	; 89
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e9 e5       	ldi	r30, 0x59	; 89
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	8b 7f       	andi	r24, 0xFB	; 251
    36aa:	8c 93       	st	X, r24
    36ac:	1f c0       	rjmp	.+62     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER1_COMPB: CLR_BIT(TIMER_TIMSK,3); break;
    36ae:	a9 e5       	ldi	r26, 0x59	; 89
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e9 e5       	ldi	r30, 0x59	; 89
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	87 7f       	andi	r24, 0xF7	; 247
    36ba:	8c 93       	st	X, r24
    36bc:	17 c0       	rjmp	.+46     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER1_COMPA: CLR_BIT(TIMER_TIMSK,4); break;
    36be:	a9 e5       	ldi	r26, 0x59	; 89
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e9 e5       	ldi	r30, 0x59	; 89
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	8f 7e       	andi	r24, 0xEF	; 239
    36ca:	8c 93       	st	X, r24
    36cc:	0f c0       	rjmp	.+30     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER2_OVF:   CLR_BIT(TIMER_TIMSK,6); break;
    36ce:	a9 e5       	ldi	r26, 0x59	; 89
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e9 e5       	ldi	r30, 0x59	; 89
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	8f 7b       	andi	r24, 0xBF	; 191
    36da:	8c 93       	st	X, r24
    36dc:	07 c0       	rjmp	.+14     	; 0x36ec <GPT_voidInerruptDisable+0xda>
	case GPT_INIT_SOURCE_TIMER2_COMP:  CLR_BIT(TIMER_TIMSK,7); break;
    36de:	a9 e5       	ldi	r26, 0x59	; 89
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	e9 e5       	ldi	r30, 0x59	; 89
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	8f 77       	andi	r24, 0x7F	; 127
    36ea:	8c 93       	st	X, r24
	default:  break;
	}
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <GPT_voidSetCallBack>:
void GPT_voidSetCallBack (Gpt_SourceInterrputType Source , void (*CallBack)(void))
{
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <GPT_voidSetCallBack+0x6>
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <GPT_voidSetCallBack+0x8>
    3700:	0f 92       	push	r0
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	7b 83       	std	Y+3, r23	; 0x03
    370a:	6a 83       	std	Y+2, r22	; 0x02
    switch (Source)
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	28 2f       	mov	r18, r24
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	3d 83       	std	Y+5, r19	; 0x05
    3714:	2c 83       	std	Y+4, r18	; 0x04
    3716:	8c 81       	ldd	r24, Y+4	; 0x04
    3718:	9d 81       	ldd	r25, Y+5	; 0x05
    371a:	83 30       	cpi	r24, 0x03	; 3
    371c:	91 05       	cpc	r25, r1
    371e:	c9 f1       	breq	.+114    	; 0x3792 <GPT_voidSetCallBack+0x9a>
    3720:	2c 81       	ldd	r18, Y+4	; 0x04
    3722:	3d 81       	ldd	r19, Y+5	; 0x05
    3724:	24 30       	cpi	r18, 0x04	; 4
    3726:	31 05       	cpc	r19, r1
    3728:	7c f4       	brge	.+30     	; 0x3748 <GPT_voidSetCallBack+0x50>
    372a:	8c 81       	ldd	r24, Y+4	; 0x04
    372c:	9d 81       	ldd	r25, Y+5	; 0x05
    372e:	81 30       	cpi	r24, 0x01	; 1
    3730:	91 05       	cpc	r25, r1
    3732:	09 f1       	breq	.+66     	; 0x3776 <GPT_voidSetCallBack+0x7e>
    3734:	2c 81       	ldd	r18, Y+4	; 0x04
    3736:	3d 81       	ldd	r19, Y+5	; 0x05
    3738:	22 30       	cpi	r18, 0x02	; 2
    373a:	31 05       	cpc	r19, r1
    373c:	1c f5       	brge	.+70     	; 0x3784 <GPT_voidSetCallBack+0x8c>
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	9d 81       	ldd	r25, Y+5	; 0x05
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	89 f0       	breq	.+34     	; 0x3768 <GPT_voidSetCallBack+0x70>
    3746:	40 c0       	rjmp	.+128    	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    3748:	2c 81       	ldd	r18, Y+4	; 0x04
    374a:	3d 81       	ldd	r19, Y+5	; 0x05
    374c:	25 30       	cpi	r18, 0x05	; 5
    374e:	31 05       	cpc	r19, r1
    3750:	71 f1       	breq	.+92     	; 0x37ae <GPT_voidSetCallBack+0xb6>
    3752:	8c 81       	ldd	r24, Y+4	; 0x04
    3754:	9d 81       	ldd	r25, Y+5	; 0x05
    3756:	85 30       	cpi	r24, 0x05	; 5
    3758:	91 05       	cpc	r25, r1
    375a:	14 f1       	brlt	.+68     	; 0x37a0 <GPT_voidSetCallBack+0xa8>
    375c:	2c 81       	ldd	r18, Y+4	; 0x04
    375e:	3d 81       	ldd	r19, Y+5	; 0x05
    3760:	26 30       	cpi	r18, 0x06	; 6
    3762:	31 05       	cpc	r19, r1
    3764:	59 f1       	breq	.+86     	; 0x37bc <GPT_voidSetCallBack+0xc4>
    3766:	30 c0       	rjmp	.+96     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    {
    case GPT_INIT_SOURCE_TIMER0_OVF:   Callback_Gpt_TIM0_OVF=CallBack;   break;
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	90 93 7b 00 	sts	0x007B, r25
    3770:	80 93 7a 00 	sts	0x007A, r24
    3774:	29 c0       	rjmp	.+82     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER0_COMP:  Callback_Gpt_TIM0_COMP=CallBack;  break;
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	9b 81       	ldd	r25, Y+3	; 0x03
    377a:	90 93 7d 00 	sts	0x007D, r25
    377e:	80 93 7c 00 	sts	0x007C, r24
    3782:	22 c0       	rjmp	.+68     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER1_OVF:   Callback_Gpt_TIM1_OVF=CallBack;   break;
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	9b 81       	ldd	r25, Y+3	; 0x03
    3788:	90 93 7f 00 	sts	0x007F, r25
    378c:	80 93 7e 00 	sts	0x007E, r24
    3790:	1b c0       	rjmp	.+54     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER1_COMPA: Callback_Gpt_TIM1_COMPA=CallBack; break;
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	90 93 81 00 	sts	0x0081, r25
    379a:	80 93 80 00 	sts	0x0080, r24
    379e:	14 c0       	rjmp	.+40     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER1_COMPB: Callback_Gpt_TIM1_COMPB=CallBack; break;
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	9b 81       	ldd	r25, Y+3	; 0x03
    37a4:	90 93 83 00 	sts	0x0083, r25
    37a8:	80 93 82 00 	sts	0x0082, r24
    37ac:	0d c0       	rjmp	.+26     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER2_OVF:   Callback_Gpt_TIM2_OVF=CallBack;   break;
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	90 93 85 00 	sts	0x0085, r25
    37b6:	80 93 84 00 	sts	0x0084, r24
    37ba:	06 c0       	rjmp	.+12     	; 0x37c8 <GPT_voidSetCallBack+0xd0>
    case GPT_INIT_SOURCE_TIMER2_COMP:  Callback_Gpt_TIM2_COMP=CallBack;  break;
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	9b 81       	ldd	r25, Y+3	; 0x03
    37c0:	90 93 87 00 	sts	0x0087, r25
    37c4:	80 93 86 00 	sts	0x0086, r24
    default:   break;
    }
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <main>:

void ISR (void);
u16 PeriodTicks=0;
u16 OnTicks=0;
void main (void)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT_MODE);
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	63 e0       	ldi	r22, 0x03	; 3
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT_FLOATING_MODE);
    37ea:	83 e0       	ldi	r24, 0x03	; 3
    37ec:	62 e0       	ldi	r22, 0x02	; 2
    37ee:	42 e0       	ldi	r20, 0x02	; 2
    37f0:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_u8SetPinDirection>
	PWM_voidSetOCR0(64);
    37f4:	80 e4       	ldi	r24, 0x40	; 64
    37f6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <PWM_voidSetOCR0>
	EXT_voidEnableInterrupt(EXTINIT_SOURCE_INIT0);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <EXT_voidEnableInterrupt>
	EXT_voidSetSenseControl(EXTINIT_SENSE_FALLING_EDGE,EXTINIT_SOURCE_INIT0);
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EXT_voidSetSenseControl>
	EXT_voidSetCallBack(EXTINIT_SOURCE_INIT0, ISR);
    3808:	21 e4       	ldi	r18, 0x41	; 65
    380a:	3c e1       	ldi	r19, 0x1C	; 28
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	b9 01       	movw	r22, r18
    3810:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <EXT_voidSetCallBack>
	LCD_voidInit();
    3814:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_voidInit>
	PWM_voidTimer0Init();
    3818:	0e 94 1f 12 	call	0x243e	; 0x243e <PWM_voidTimer0Init>
	PWM_voidTimer1Init();
    381c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <PWM_voidTimer1Init>
	GIE_voidEnable();
    3820:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <GIE_voidEnable>

	while ((PeriodTicks ==0) || (OnTicks==0) );
    3824:	80 91 88 00 	lds	r24, 0x0088
    3828:	90 91 89 00 	lds	r25, 0x0089
    382c:	00 97       	sbiw	r24, 0x00	; 0
    382e:	d1 f3       	breq	.-12     	; 0x3824 <main+0x4c>
    3830:	80 91 8a 00 	lds	r24, 0x008A
    3834:	90 91 8b 00 	lds	r25, 0x008B
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	a1 f3       	breq	.-24     	; 0x3824 <main+0x4c>
	LCD_voidDisplayString("Period=");
    383c:	80 e6       	ldi	r24, 0x60	; 96
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidDisplayString>
	LCD_voidDispalyNumber(PeriodTicks);
    3844:	80 91 88 00 	lds	r24, 0x0088
    3848:	90 91 89 00 	lds	r25, 0x0089
    384c:	cc 01       	movw	r24, r24
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	bc 01       	movw	r22, r24
    3854:	cd 01       	movw	r24, r26
    3856:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_voidDispalyNumber>
	LCD_voidGotoXandY(1,0);
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidGotoXandY>
	LCD_voidDisplayString("On=");
    3862:	88 e6       	ldi	r24, 0x68	; 104
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidDisplayString>
	LCD_voidDispalyNumber(OnTicks);
    386a:	80 91 8a 00 	lds	r24, 0x008A
    386e:	90 91 8b 00 	lds	r25, 0x008B
    3872:	cc 01       	movw	r24, r24
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_voidDispalyNumber>
    3880:	ff cf       	rjmp	.-2      	; 0x3880 <main+0xa8>

00003882 <ISR>:

	}
}

void ISR (void)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
	static u8 Counter;
	Counter++;
    388a:	80 91 8c 00 	lds	r24, 0x008C
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	80 93 8c 00 	sts	0x008C, r24
	if (Counter==1)
    3894:	80 91 8c 00 	lds	r24, 0x008C
    3898:	81 30       	cpi	r24, 0x01	; 1
    389a:	51 f4       	brne	.+20     	; 0x38b0 <ISR+0x2e>
	{
		GPT_voidSetCounterValue(GPT_CHANNEL_TIMER1,0);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	0e 94 de 19 	call	0x33bc	; 0x33bc <GPT_voidSetCounterValue>
		EXT_voidSetSenseControl(EXTINIT_SENSE_RISING_EDGE,EXTINIT_SOURCE_INIT0);
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EXT_voidSetSenseControl>
    38ae:	2e c0       	rjmp	.+92     	; 0x390c <ISR+0x8a>
	}
	else if (Counter==2)
    38b0:	80 91 8c 00 	lds	r24, 0x008C
    38b4:	82 30       	cpi	r24, 0x02	; 2
    38b6:	61 f4       	brne	.+24     	; 0x38d0 <ISR+0x4e>
	{
		PeriodTicks=GPT_voidGetTimerValue(GPT_CHANNEL_TIMER1);
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <GPT_voidGetTimerValue>
    38be:	90 93 89 00 	sts	0x0089, r25
    38c2:	80 93 88 00 	sts	0x0088, r24
		EXT_voidSetSenseControl(EXTINIT_SENSE_FALLING_EDGE,EXTINIT_SOURCE_INIT0);
    38c6:	82 e0       	ldi	r24, 0x02	; 2
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EXT_voidSetSenseControl>
    38ce:	1e c0       	rjmp	.+60     	; 0x390c <ISR+0x8a>
	}
	else if (Counter==3)
    38d0:	80 91 8c 00 	lds	r24, 0x008C
    38d4:	83 30       	cpi	r24, 0x03	; 3
    38d6:	d1 f4       	brne	.+52     	; 0x390c <ISR+0x8a>
	{
		OnTicks=GPT_voidGetTimerValue(GPT_CHANNEL_TIMER1);
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <GPT_voidGetTimerValue>
    38de:	90 93 8b 00 	sts	0x008B, r25
    38e2:	80 93 8a 00 	sts	0x008A, r24
		OnTicks-=PeriodTicks;
    38e6:	20 91 8a 00 	lds	r18, 0x008A
    38ea:	30 91 8b 00 	lds	r19, 0x008B
    38ee:	80 91 88 00 	lds	r24, 0x0088
    38f2:	90 91 89 00 	lds	r25, 0x0089
    38f6:	a9 01       	movw	r20, r18
    38f8:	48 1b       	sub	r20, r24
    38fa:	59 0b       	sbc	r21, r25
    38fc:	ca 01       	movw	r24, r20
    38fe:	90 93 8b 00 	sts	0x008B, r25
    3902:	80 93 8a 00 	sts	0x008A, r24
		EXT_voidDisableInterrupt(EXTINIT_SOURCE_INIT0);
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	0e 94 a5 0c 	call	0x194a	; 0x194a <EXT_voidDisableInterrupt>

	}
}
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <__mulsi3>:
    3912:	62 9f       	mul	r22, r18
    3914:	d0 01       	movw	r26, r0
    3916:	73 9f       	mul	r23, r19
    3918:	f0 01       	movw	r30, r0
    391a:	82 9f       	mul	r24, r18
    391c:	e0 0d       	add	r30, r0
    391e:	f1 1d       	adc	r31, r1
    3920:	64 9f       	mul	r22, r20
    3922:	e0 0d       	add	r30, r0
    3924:	f1 1d       	adc	r31, r1
    3926:	92 9f       	mul	r25, r18
    3928:	f0 0d       	add	r31, r0
    392a:	83 9f       	mul	r24, r19
    392c:	f0 0d       	add	r31, r0
    392e:	74 9f       	mul	r23, r20
    3930:	f0 0d       	add	r31, r0
    3932:	65 9f       	mul	r22, r21
    3934:	f0 0d       	add	r31, r0
    3936:	99 27       	eor	r25, r25
    3938:	72 9f       	mul	r23, r18
    393a:	b0 0d       	add	r27, r0
    393c:	e1 1d       	adc	r30, r1
    393e:	f9 1f       	adc	r31, r25
    3940:	63 9f       	mul	r22, r19
    3942:	b0 0d       	add	r27, r0
    3944:	e1 1d       	adc	r30, r1
    3946:	f9 1f       	adc	r31, r25
    3948:	bd 01       	movw	r22, r26
    394a:	cf 01       	movw	r24, r30
    394c:	11 24       	eor	r1, r1
    394e:	08 95       	ret

00003950 <__udivmodsi4>:
    3950:	a1 e2       	ldi	r26, 0x21	; 33
    3952:	1a 2e       	mov	r1, r26
    3954:	aa 1b       	sub	r26, r26
    3956:	bb 1b       	sub	r27, r27
    3958:	fd 01       	movw	r30, r26
    395a:	0d c0       	rjmp	.+26     	; 0x3976 <__udivmodsi4_ep>

0000395c <__udivmodsi4_loop>:
    395c:	aa 1f       	adc	r26, r26
    395e:	bb 1f       	adc	r27, r27
    3960:	ee 1f       	adc	r30, r30
    3962:	ff 1f       	adc	r31, r31
    3964:	a2 17       	cp	r26, r18
    3966:	b3 07       	cpc	r27, r19
    3968:	e4 07       	cpc	r30, r20
    396a:	f5 07       	cpc	r31, r21
    396c:	20 f0       	brcs	.+8      	; 0x3976 <__udivmodsi4_ep>
    396e:	a2 1b       	sub	r26, r18
    3970:	b3 0b       	sbc	r27, r19
    3972:	e4 0b       	sbc	r30, r20
    3974:	f5 0b       	sbc	r31, r21

00003976 <__udivmodsi4_ep>:
    3976:	66 1f       	adc	r22, r22
    3978:	77 1f       	adc	r23, r23
    397a:	88 1f       	adc	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	1a 94       	dec	r1
    3980:	69 f7       	brne	.-38     	; 0x395c <__udivmodsi4_loop>
    3982:	60 95       	com	r22
    3984:	70 95       	com	r23
    3986:	80 95       	com	r24
    3988:	90 95       	com	r25
    398a:	9b 01       	movw	r18, r22
    398c:	ac 01       	movw	r20, r24
    398e:	bd 01       	movw	r22, r26
    3990:	cf 01       	movw	r24, r30
    3992:	08 95       	ret

00003994 <__divmodsi4>:
    3994:	97 fb       	bst	r25, 7
    3996:	09 2e       	mov	r0, r25
    3998:	05 26       	eor	r0, r21
    399a:	0e d0       	rcall	.+28     	; 0x39b8 <__divmodsi4_neg1>
    399c:	57 fd       	sbrc	r21, 7
    399e:	04 d0       	rcall	.+8      	; 0x39a8 <__divmodsi4_neg2>
    39a0:	d7 df       	rcall	.-82     	; 0x3950 <__udivmodsi4>
    39a2:	0a d0       	rcall	.+20     	; 0x39b8 <__divmodsi4_neg1>
    39a4:	00 1c       	adc	r0, r0
    39a6:	38 f4       	brcc	.+14     	; 0x39b6 <__divmodsi4_exit>

000039a8 <__divmodsi4_neg2>:
    39a8:	50 95       	com	r21
    39aa:	40 95       	com	r20
    39ac:	30 95       	com	r19
    39ae:	21 95       	neg	r18
    39b0:	3f 4f       	sbci	r19, 0xFF	; 255
    39b2:	4f 4f       	sbci	r20, 0xFF	; 255
    39b4:	5f 4f       	sbci	r21, 0xFF	; 255

000039b6 <__divmodsi4_exit>:
    39b6:	08 95       	ret

000039b8 <__divmodsi4_neg1>:
    39b8:	f6 f7       	brtc	.-4      	; 0x39b6 <__divmodsi4_exit>
    39ba:	90 95       	com	r25
    39bc:	80 95       	com	r24
    39be:	70 95       	com	r23
    39c0:	61 95       	neg	r22
    39c2:	7f 4f       	sbci	r23, 0xFF	; 255
    39c4:	8f 4f       	sbci	r24, 0xFF	; 255
    39c6:	9f 4f       	sbci	r25, 0xFF	; 255
    39c8:	08 95       	ret

000039ca <__prologue_saves__>:
    39ca:	2f 92       	push	r2
    39cc:	3f 92       	push	r3
    39ce:	4f 92       	push	r4
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	ca 1b       	sub	r28, r26
    39f4:	db 0b       	sbc	r29, r27
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	09 94       	ijmp

00003a02 <__epilogue_restores__>:
    3a02:	2a 88       	ldd	r2, Y+18	; 0x12
    3a04:	39 88       	ldd	r3, Y+17	; 0x11
    3a06:	48 88       	ldd	r4, Y+16	; 0x10
    3a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a14:	b9 84       	ldd	r11, Y+9	; 0x09
    3a16:	c8 84       	ldd	r12, Y+8	; 0x08
    3a18:	df 80       	ldd	r13, Y+7	; 0x07
    3a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3a20:	1b 81       	ldd	r17, Y+3	; 0x03
    3a22:	aa 81       	ldd	r26, Y+2	; 0x02
    3a24:	b9 81       	ldd	r27, Y+1	; 0x01
    3a26:	ce 0f       	add	r28, r30
    3a28:	d1 1d       	adc	r29, r1
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	ed 01       	movw	r28, r26
    3a36:	08 95       	ret

00003a38 <_exit>:
    3a38:	f8 94       	cli

00003a3a <__stop_program>:
    3a3a:	ff cf       	rjmp	.-2      	; 0x3a3a <__stop_program>
